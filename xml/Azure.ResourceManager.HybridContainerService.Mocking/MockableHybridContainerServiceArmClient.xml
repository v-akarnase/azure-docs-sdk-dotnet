<Type Name="MockableHybridContainerServiceArmClient" FullName="Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient">
  <TypeSignature Language="C#" Value="public class MockableHybridContainerServiceArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableHybridContainerServiceArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableHybridContainerServiceArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableHybridContainerServiceArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.HybridContainerService</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableHybridContainerServiceArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridContainerService</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridContainerServiceAgentPoolResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridContainerService.HybridContainerServiceAgentPoolResource GetHybridContainerServiceAgentPoolResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridContainerService.HybridContainerServiceAgentPoolResource GetHybridContainerServiceAgentPoolResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient.GetHybridContainerServiceAgentPoolResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridContainerServiceAgentPoolResource (id As ResourceIdentifier) As HybridContainerServiceAgentPoolResource" />
      <MemberSignature Language="F#" Value="abstract member GetHybridContainerServiceAgentPoolResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridContainerService.HybridContainerServiceAgentPoolResource&#xA;override this.GetHybridContainerServiceAgentPoolResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridContainerService.HybridContainerServiceAgentPoolResource" Usage="mockableHybridContainerServiceArmClient.GetHybridContainerServiceAgentPoolResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridContainerService</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridContainerService.HybridContainerServiceAgentPoolResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.HybridContainerService.HybridContainerServiceAgentPoolResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.HybridContainerService.HybridContainerServiceAgentPoolResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.HybridContainerService.HybridContainerServiceAgentPoolResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.HybridContainerService.HybridContainerServiceAgentPoolResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridContainerServiceVirtualNetworkResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridContainerService.HybridContainerServiceVirtualNetworkResource GetHybridContainerServiceVirtualNetworkResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridContainerService.HybridContainerServiceVirtualNetworkResource GetHybridContainerServiceVirtualNetworkResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient.GetHybridContainerServiceVirtualNetworkResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridContainerServiceVirtualNetworkResource (id As ResourceIdentifier) As HybridContainerServiceVirtualNetworkResource" />
      <MemberSignature Language="F#" Value="abstract member GetHybridContainerServiceVirtualNetworkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridContainerService.HybridContainerServiceVirtualNetworkResource&#xA;override this.GetHybridContainerServiceVirtualNetworkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridContainerService.HybridContainerServiceVirtualNetworkResource" Usage="mockableHybridContainerServiceArmClient.GetHybridContainerServiceVirtualNetworkResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridContainerService</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridContainerService.HybridContainerServiceVirtualNetworkResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.HybridContainerService.HybridContainerServiceVirtualNetworkResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.HybridContainerService.HybridContainerServiceVirtualNetworkResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.HybridContainerService.HybridContainerServiceVirtualNetworkResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.HybridContainerService.HybridContainerServiceVirtualNetworkResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridIdentityMetadataResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridContainerService.HybridIdentityMetadataResource GetHybridIdentityMetadataResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridContainerService.HybridIdentityMetadataResource GetHybridIdentityMetadataResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient.GetHybridIdentityMetadataResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridIdentityMetadataResource (id As ResourceIdentifier) As HybridIdentityMetadataResource" />
      <MemberSignature Language="F#" Value="abstract member GetHybridIdentityMetadataResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridContainerService.HybridIdentityMetadataResource&#xA;override this.GetHybridIdentityMetadataResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridContainerService.HybridIdentityMetadataResource" Usage="mockableHybridContainerServiceArmClient.GetHybridIdentityMetadataResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridContainerService</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridContainerService.HybridIdentityMetadataResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.HybridContainerService.HybridIdentityMetadataResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.HybridContainerService.HybridIdentityMetadataResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.HybridContainerService.HybridIdentityMetadataResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.HybridContainerService.HybridIdentityMetadataResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrchestratorsHybridContainerService">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.OrchestratorVersionProfileListResult&gt; GetOrchestratorsHybridContainerService (Azure.Core.ResourceIdentifier scope, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.HybridContainerService.Models.OrchestratorVersionProfileListResult&gt; GetOrchestratorsHybridContainerService(class Azure.Core.ResourceIdentifier scope, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient.GetOrchestratorsHybridContainerService(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrchestratorsHybridContainerService (scope As ResourceIdentifier, Optional cancellationToken As CancellationToken = Nothing) As Response(Of OrchestratorVersionProfileListResult)" />
      <MemberSignature Language="F#" Value="abstract member GetOrchestratorsHybridContainerService : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.OrchestratorVersionProfileListResult&gt;&#xA;override this.GetOrchestratorsHybridContainerService : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.OrchestratorVersionProfileListResult&gt;" Usage="mockableHybridContainerServiceArmClient.GetOrchestratorsHybridContainerService (scope, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridContainerService</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.OrchestratorVersionProfileListResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the available orchestrators in a custom location for HybridAKS
            <list type="bullet"><item><term>Request Path</term><description>/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/orchestrators</description></item><item><term>Operation Id</term><description>HybridContainerService_ListOrchestrators</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOrchestratorsHybridContainerServiceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.OrchestratorVersionProfileListResult&gt;&gt; GetOrchestratorsHybridContainerServiceAsync (Azure.Core.ResourceIdentifier scope, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.HybridContainerService.Models.OrchestratorVersionProfileListResult&gt;&gt; GetOrchestratorsHybridContainerServiceAsync(class Azure.Core.ResourceIdentifier scope, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient.GetOrchestratorsHybridContainerServiceAsync(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetOrchestratorsHybridContainerServiceAsync (scope As ResourceIdentifier, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of OrchestratorVersionProfileListResult))" />
      <MemberSignature Language="F#" Value="abstract member GetOrchestratorsHybridContainerServiceAsync : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.OrchestratorVersionProfileListResult&gt;&gt;&#xA;override this.GetOrchestratorsHybridContainerServiceAsync : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.OrchestratorVersionProfileListResult&gt;&gt;" Usage="mockableHybridContainerServiceArmClient.GetOrchestratorsHybridContainerServiceAsync (scope, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridContainerService</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.OrchestratorVersionProfileListResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the available orchestrators in a custom location for HybridAKS
            <list type="bullet"><item><term>Request Path</term><description>/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/orchestrators</description></item><item><term>Operation Id</term><description>HybridContainerService_ListOrchestrators</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProvisionedClusterResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridContainerService.ProvisionedClusterResource GetProvisionedClusterResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridContainerService.ProvisionedClusterResource GetProvisionedClusterResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient.GetProvisionedClusterResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProvisionedClusterResource (id As ResourceIdentifier) As ProvisionedClusterResource" />
      <MemberSignature Language="F#" Value="abstract member GetProvisionedClusterResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridContainerService.ProvisionedClusterResource&#xA;override this.GetProvisionedClusterResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridContainerService.ProvisionedClusterResource" Usage="mockableHybridContainerServiceArmClient.GetProvisionedClusterResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridContainerService</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridContainerService.ProvisionedClusterResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.HybridContainerService.ProvisionedClusterResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.HybridContainerService.ProvisionedClusterResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.HybridContainerService.ProvisionedClusterResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.HybridContainerService.ProvisionedClusterResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProvisionedClusterUpgradeProfileResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridContainerService.ProvisionedClusterUpgradeProfileResource GetProvisionedClusterUpgradeProfileResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridContainerService.ProvisionedClusterUpgradeProfileResource GetProvisionedClusterUpgradeProfileResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient.GetProvisionedClusterUpgradeProfileResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetProvisionedClusterUpgradeProfileResource (id As ResourceIdentifier) As ProvisionedClusterUpgradeProfileResource" />
      <MemberSignature Language="F#" Value="abstract member GetProvisionedClusterUpgradeProfileResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridContainerService.ProvisionedClusterUpgradeProfileResource&#xA;override this.GetProvisionedClusterUpgradeProfileResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridContainerService.ProvisionedClusterUpgradeProfileResource" Usage="mockableHybridContainerServiceArmClient.GetProvisionedClusterUpgradeProfileResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridContainerService</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridContainerService.ProvisionedClusterUpgradeProfileResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.HybridContainerService.ProvisionedClusterUpgradeProfileResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.HybridContainerService.ProvisionedClusterUpgradeProfileResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.HybridContainerService.ProvisionedClusterUpgradeProfileResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.HybridContainerService.ProvisionedClusterUpgradeProfileResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStorageSpaceResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridContainerService.StorageSpaceResource GetStorageSpaceResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridContainerService.StorageSpaceResource GetStorageSpaceResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient.GetStorageSpaceResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetStorageSpaceResource (id As ResourceIdentifier) As StorageSpaceResource" />
      <MemberSignature Language="F#" Value="abstract member GetStorageSpaceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridContainerService.StorageSpaceResource&#xA;override this.GetStorageSpaceResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridContainerService.StorageSpaceResource" Usage="mockableHybridContainerServiceArmClient.GetStorageSpaceResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridContainerService</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridContainerService.StorageSpaceResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.HybridContainerService.StorageSpaceResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.HybridContainerService.StorageSpaceResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.HybridContainerService.StorageSpaceResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.HybridContainerService.StorageSpaceResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVmSkusHybridContainerService">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.VmSkuListResult&gt; GetVmSkusHybridContainerService (Azure.Core.ResourceIdentifier scope, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.HybridContainerService.Models.VmSkuListResult&gt; GetVmSkusHybridContainerService(class Azure.Core.ResourceIdentifier scope, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient.GetVmSkusHybridContainerService(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVmSkusHybridContainerService (scope As ResourceIdentifier, Optional cancellationToken As CancellationToken = Nothing) As Response(Of VmSkuListResult)" />
      <MemberSignature Language="F#" Value="abstract member GetVmSkusHybridContainerService : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.VmSkuListResult&gt;&#xA;override this.GetVmSkusHybridContainerService : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.VmSkuListResult&gt;" Usage="mockableHybridContainerServiceArmClient.GetVmSkusHybridContainerService (scope, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridContainerService</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.VmSkuListResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the available VM SKUs in a custom location for HybridAKS
            <list type="bullet"><item><term>Request Path</term><description>/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/vmSkus</description></item><item><term>Operation Id</term><description>HybridContainerService_ListVMSkus</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVmSkusHybridContainerServiceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.VmSkuListResult&gt;&gt; GetVmSkusHybridContainerServiceAsync (Azure.Core.ResourceIdentifier scope, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.HybridContainerService.Models.VmSkuListResult&gt;&gt; GetVmSkusHybridContainerServiceAsync(class Azure.Core.ResourceIdentifier scope, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridContainerService.Mocking.MockableHybridContainerServiceArmClient.GetVmSkusHybridContainerServiceAsync(Azure.Core.ResourceIdentifier,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetVmSkusHybridContainerServiceAsync (scope As ResourceIdentifier, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of VmSkuListResult))" />
      <MemberSignature Language="F#" Value="abstract member GetVmSkusHybridContainerServiceAsync : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.VmSkuListResult&gt;&gt;&#xA;override this.GetVmSkusHybridContainerServiceAsync : Azure.Core.ResourceIdentifier * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.VmSkuListResult&gt;&gt;" Usage="mockableHybridContainerServiceArmClient.GetVmSkusHybridContainerServiceAsync (scope, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridContainerService</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridContainerService.Models.VmSkuListResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="Azure.Core.ResourceIdentifier" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="scope"> The scope to use. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists the available VM SKUs in a custom location for HybridAKS
            <list type="bullet"><item><term>Request Path</term><description>/{customLocationResourceUri}/providers/Microsoft.HybridContainerService/vmSkus</description></item><item><term>Operation Id</term><description>HybridContainerService_ListVMSkus</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
