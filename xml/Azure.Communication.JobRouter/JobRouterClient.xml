<Type Name="JobRouterClient" FullName="Azure.Communication.JobRouter.JobRouterClient">
  <TypeSignature Language="C#" Value="public class JobRouterClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit JobRouterClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.Communication.JobRouter.JobRouterClient" />
  <TypeSignature Language="VB.NET" Value="Public Class JobRouterClient" />
  <TypeSignature Language="F#" Value="type JobRouterClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> The JobRouter service client. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected JobRouterClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Initializes a new instance of <see cref="T:Azure.Communication.JobRouter.JobRouterClient" /> for mocking.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JobRouterClient (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="F#" Value="new Azure.Communication.JobRouter.JobRouterClient : string -&gt; Azure.Communication.JobRouter.JobRouterClient" Usage="new Azure.Communication.JobRouter.JobRouterClient connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Connection string acquired from the Azure Communication Services resource.</param>
        <summary> Initializes a new instance of <see cref="T:Azure.Communication.JobRouter.JobRouterClient" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JobRouterClient (string connectionString, Azure.Communication.JobRouter.JobRouterClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class Azure.Communication.JobRouter.JobRouterClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.#ctor(System.String,Azure.Communication.JobRouter.JobRouterClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, options As JobRouterClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.Communication.JobRouter.JobRouterClient : string * Azure.Communication.JobRouter.JobRouterClientOptions -&gt; Azure.Communication.JobRouter.JobRouterClient" Usage="new Azure.Communication.JobRouter.JobRouterClient (connectionString, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.JobRouterClientOptions" />
      </Parameters>
      <Docs>
        <param name="connectionString">Connection string acquired from the Azure Communication Services resource.</param>
        <param name="options">Client option exposing <see cref="P:Azure.Core.ClientOptions.Diagnostics" />, <see cref="P:Azure.Core.ClientOptions.Retry" />, <see cref="P:Azure.Core.ClientOptions.Transport" />, etc.</param>
        <summary> Initializes a new instance of <see cref="T:Azure.Communication.JobRouter.JobRouterClient" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JobRouterClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.Communication.JobRouter.JobRouterClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.Communication.JobRouter.JobRouterClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.Communication.JobRouter.JobRouterClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, Optional options As JobRouterClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Communication.JobRouter.JobRouterClient : Uri * Azure.AzureKeyCredential * Azure.Communication.JobRouter.JobRouterClientOptions -&gt; Azure.Communication.JobRouter.JobRouterClient" Usage="new Azure.Communication.JobRouter.JobRouterClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.JobRouterClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">The URI of the Azure Communication Services resource.</param>
        <param name="credential">The <see cref="T:Azure.AzureKeyCredential" /> used to authenticate requests.</param>
        <param name="options">Client option exposing <see cref="P:Azure.Core.ClientOptions.Diagnostics" />, <see cref="P:Azure.Core.ClientOptions.Retry" />, <see cref="P:Azure.Core.ClientOptions.Transport" />, etc.</param>
        <summary> Initializes a new instance of <see cref="T:Azure.Communication.JobRouter.JobRouterClient" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public JobRouterClient (Uri endpoint, Azure.Core.TokenCredential credential, Azure.Communication.JobRouter.JobRouterClientOptions options = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.Core.TokenCredential credential, class Azure.Communication.JobRouter.JobRouterClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.#ctor(System.Uri,Azure.Core.TokenCredential,Azure.Communication.JobRouter.JobRouterClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As TokenCredential, Optional options As JobRouterClientOptions = Nothing)" />
      <MemberSignature Language="F#" Value="new Azure.Communication.JobRouter.JobRouterClient : Uri * Azure.Core.TokenCredential * Azure.Communication.JobRouter.JobRouterClientOptions -&gt; Azure.Communication.JobRouter.JobRouterClient" Usage="new Azure.Communication.JobRouter.JobRouterClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.Core.TokenCredential" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.JobRouterClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">The URI of the Azure Communication Services resource.</param>
        <param name="credential">The TokenCredential used to authenticate requests, such as DefaultAzureCredential.</param>
        <param name="options">Client option exposing <see cref="P:Azure.Core.ClientOptions.Diagnostics" />, <see cref="P:Azure.Core.ClientOptions.Retry" />, <see cref="P:Azure.Core.ClientOptions.Transport" />, etc.</param>
        <summary> Initializes a new instance of <see cref="T:Azure.Communication.JobRouter.JobRouterClient" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptJobOffer">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AcceptJobOffer (string workerId, string offerId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AcceptJobOffer(string workerId, string offerId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.AcceptJobOffer(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AcceptJobOffer (workerId As String, offerId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member AcceptJobOffer : string * string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AcceptJobOffer : string * string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.AcceptJobOffer (workerId, offerId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="offerId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="offerId"> Id of the offer. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Accepts an offer to work on a job and returns a 409/Conflict if another agent
            accepted the job already.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.AcceptJobOffer(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AcceptJobOffer and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.AcceptJobOffer("<workerId>", "<offerId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("workerId").ToString());
]]></code>
This sample shows how to call AcceptJobOffer with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.AcceptJobOffer("<workerId>", "<offerId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("workerId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AcceptJobOffer">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.AcceptJobOfferResult&gt; AcceptJobOffer (string workerId, string offerId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.AcceptJobOfferResult&gt; AcceptJobOffer(string workerId, string offerId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.AcceptJobOffer(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AcceptJobOffer (workerId As String, offerId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AcceptJobOfferResult)" />
      <MemberSignature Language="F#" Value="abstract member AcceptJobOffer : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.AcceptJobOfferResult&gt;&#xA;override this.AcceptJobOffer : string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.AcceptJobOfferResult&gt;" Usage="jobRouterClient.AcceptJobOffer (workerId, offerId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.AcceptJobOfferResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="offerId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="offerId"> Id of the offer. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Accepts an offer to work on a job and returns a 409/Conflict if another agent
            accepted the job already.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call AcceptJobOffer.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<AcceptJobOfferResult> response = client.AcceptJobOffer("<workerId>", "<offerId>");
]]></code>
This sample shows how to call AcceptJobOffer with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<AcceptJobOfferResult> response = client.AcceptJobOffer("<workerId>", "<offerId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AcceptJobOfferAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AcceptJobOfferAsync (string workerId, string offerId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AcceptJobOfferAsync(string workerId, string offerId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.AcceptJobOfferAsync(System.String,System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AcceptJobOfferAsync (workerId As String, offerId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AcceptJobOfferAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AcceptJobOfferAsync : string * string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.AcceptJobOfferAsync (workerId, offerId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="offerId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="offerId"> Id of the offer. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Accepts an offer to work on a job and returns a 409/Conflict if another agent
            accepted the job already.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.AcceptJobOfferAsync(System.String,System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call AcceptJobOfferAsync and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.AcceptJobOfferAsync("<workerId>", "<offerId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("workerId").ToString());
]]></code>
This sample shows how to call AcceptJobOfferAsync with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.AcceptJobOfferAsync("<workerId>", "<offerId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("workerId").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="AcceptJobOfferAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.AcceptJobOfferResult&gt;&gt; AcceptJobOfferAsync (string workerId, string offerId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.AcceptJobOfferResult&gt;&gt; AcceptJobOfferAsync(string workerId, string offerId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.AcceptJobOfferAsync(System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AcceptJobOfferAsync (workerId As String, offerId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AcceptJobOfferResult))" />
      <MemberSignature Language="F#" Value="abstract member AcceptJobOfferAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.AcceptJobOfferResult&gt;&gt;&#xA;override this.AcceptJobOfferAsync : string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.AcceptJobOfferResult&gt;&gt;" Usage="jobRouterClient.AcceptJobOfferAsync (workerId, offerId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.AcceptJobOfferResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="offerId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="offerId"> Id of the offer. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Accepts an offer to work on a job and returns a 409/Conflict if another agent
            accepted the job already.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call AcceptJobOfferAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<AcceptJobOfferResult> response = await client.AcceptJobOfferAsync("<workerId>", "<offerId>");
]]></code>
This sample shows how to call AcceptJobOfferAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<AcceptJobOfferResult> response = await client.AcceptJobOfferAsync("<workerId>", "<offerId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CancelJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CancelJob (string jobId, Azure.Communication.JobRouter.CancelJobOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CancelJob(string jobId, class Azure.Communication.JobRouter.CancelJobOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CancelJob(System.String,Azure.Communication.JobRouter.CancelJobOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelJob (jobId As String, Optional options As CancelJobOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CancelJob : string * Azure.Communication.JobRouter.CancelJobOptions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.CancelJob : string * Azure.Communication.JobRouter.CancelJobOptions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="jobRouterClient.CancelJob (jobId, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CancelJobOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="options"> Request model for cancelling job. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Submits request to cancel an existing job by Id while supplying free-form
            cancellation reason.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call CancelJob.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.CancelJob("<jobId>");
]]></code>
This sample shows how to call CancelJob with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

CancelJobOptions options = new CancelJobOptions
{
    Note = "<note>",
    DispositionCode = "<dispositionCode>",
};
Response response = client.CancelJob("<jobId>", options: options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CancelJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CancelJob (string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CancelJob(string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CancelJob(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelJob (jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CancelJob : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CancelJob : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.CancelJob (jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Submits request to cancel an existing job by Id while supplying free-form
            cancellation reason.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.CancelJob(System.String,Azure.Communication.JobRouter.CancelJobOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CancelJob.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = null;
Response response = client.CancelJob("<jobId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CancelJob with all parameters and request content.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    note = "<note>",
    dispositionCode = "<dispositionCode>",
});
Response response = client.CancelJob("<jobId>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CancelJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CancelJobAsync (string jobId, Azure.Communication.JobRouter.CancelJobOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CancelJobAsync(string jobId, class Azure.Communication.JobRouter.CancelJobOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CancelJobAsync(System.String,Azure.Communication.JobRouter.CancelJobOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelJobAsync (jobId As String, Optional options As CancelJobOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CancelJobAsync : string * Azure.Communication.JobRouter.CancelJobOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CancelJobAsync : string * Azure.Communication.JobRouter.CancelJobOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.CancelJobAsync (jobId, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CancelJobOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="options"> Request model for cancelling job. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Submits request to cancel an existing job by Id while supplying free-form
            cancellation reason.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call CancelJobAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.CancelJobAsync("<jobId>");
]]></code>
This sample shows how to call CancelJobAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

CancelJobOptions options = new CancelJobOptions
{
    Note = "<note>",
    DispositionCode = "<dispositionCode>",
};
Response response = await client.CancelJobAsync("<jobId>", options: options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CancelJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CancelJobAsync (string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CancelJobAsync(string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CancelJobAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CancelJobAsync (jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CancelJobAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CancelJobAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.CancelJobAsync (jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Submits request to cancel an existing job by Id while supplying free-form
            cancellation reason.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.CancelJobAsync(System.String,Azure.Communication.JobRouter.CancelJobOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CancelJobAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = null;
Response response = await client.CancelJobAsync("<jobId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CancelJobAsync with all parameters and request content.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    note = "<note>",
    dispositionCode = "<dispositionCode>",
});
Response response = await client.CancelJobAsync("<jobId>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CloseJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CloseJob (string jobId, Azure.Communication.JobRouter.CloseJobOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CloseJob(string jobId, class Azure.Communication.JobRouter.CloseJobOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CloseJob(System.String,Azure.Communication.JobRouter.CloseJobOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloseJob (jobId As String, options As CloseJobOptions, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CloseJob : string * Azure.Communication.JobRouter.CloseJobOptions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.CloseJob : string * Azure.Communication.JobRouter.CloseJobOptions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="jobRouterClient.CloseJob (jobId, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CloseJobOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="options"> Request model for closing job. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Closes a completed job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="options" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call CloseJob.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

CloseJobOptions options = new CloseJobOptions("<assignmentId>");
Response response = client.CloseJob("<jobId>", options);
]]></code>
This sample shows how to call CloseJob with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

CloseJobOptions options = new CloseJobOptions("<assignmentId>")
{
    DispositionCode = "<dispositionCode>",
    CloseAt = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    Note = "<note>",
};
Response response = client.CloseJob("<jobId>", options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CloseJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CloseJob (string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CloseJob(string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CloseJob(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloseJob (jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CloseJob : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CloseJob : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.CloseJob (jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Closes a completed job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.CloseJob(System.String,Azure.Communication.JobRouter.CloseJobOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CloseJob.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    assignmentId = "<assignmentId>",
});
Response response = client.CloseJob("<jobId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CloseJob with all parameters and request content.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    assignmentId = "<assignmentId>",
    dispositionCode = "<dispositionCode>",
    closeAt = "2022-05-10T14:57:31.2311892-04:00",
    note = "<note>",
});
Response response = client.CloseJob("<jobId>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CloseJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CloseJobAsync (string jobId, Azure.Communication.JobRouter.CloseJobOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CloseJobAsync(string jobId, class Azure.Communication.JobRouter.CloseJobOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CloseJobAsync(System.String,Azure.Communication.JobRouter.CloseJobOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloseJobAsync (jobId As String, options As CloseJobOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CloseJobAsync : string * Azure.Communication.JobRouter.CloseJobOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CloseJobAsync : string * Azure.Communication.JobRouter.CloseJobOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.CloseJobAsync (jobId, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CloseJobOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="options"> Request model for closing job. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Closes a completed job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="options" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call CloseJobAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

CloseJobOptions options = new CloseJobOptions("<assignmentId>");
Response response = await client.CloseJobAsync("<jobId>", options);
]]></code>
This sample shows how to call CloseJobAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

CloseJobOptions options = new CloseJobOptions("<assignmentId>")
{
    DispositionCode = "<dispositionCode>",
    CloseAt = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
    Note = "<note>",
};
Response response = await client.CloseJobAsync("<jobId>", options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CloseJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CloseJobAsync (string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CloseJobAsync(string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CloseJobAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloseJobAsync (jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CloseJobAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CloseJobAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.CloseJobAsync (jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Closes a completed job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.CloseJobAsync(System.String,Azure.Communication.JobRouter.CloseJobOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CloseJobAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    assignmentId = "<assignmentId>",
});
Response response = await client.CloseJobAsync("<jobId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CloseJobAsync with all parameters and request content.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    assignmentId = "<assignmentId>",
    dispositionCode = "<dispositionCode>",
    closeAt = "2022-05-10T14:57:31.2311892-04:00",
    note = "<note>",
});
Response response = await client.CloseJobAsync("<jobId>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CompleteJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CompleteJob (string jobId, Azure.Communication.JobRouter.CompleteJobOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CompleteJob(string jobId, class Azure.Communication.JobRouter.CompleteJobOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CompleteJob(System.String,Azure.Communication.JobRouter.CompleteJobOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompleteJob (jobId As String, options As CompleteJobOptions, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CompleteJob : string * Azure.Communication.JobRouter.CompleteJobOptions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.CompleteJob : string * Azure.Communication.JobRouter.CompleteJobOptions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="jobRouterClient.CompleteJob (jobId, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CompleteJobOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="options"> Request model for completing job. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Completes an assigned job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="options" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call CompleteJob.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

CompleteJobOptions options = new CompleteJobOptions("<assignmentId>");
Response response = client.CompleteJob("<jobId>", options);
]]></code>
This sample shows how to call CompleteJob with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

CompleteJobOptions options = new CompleteJobOptions("<assignmentId>")
{
    Note = "<note>",
};
Response response = client.CompleteJob("<jobId>", options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CompleteJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response CompleteJob (string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response CompleteJob(string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CompleteJob(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompleteJob (jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member CompleteJob : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.CompleteJob : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.CompleteJob (jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Completes an assigned job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.CompleteJob(System.String,Azure.Communication.JobRouter.CompleteJobOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CompleteJob.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    assignmentId = "<assignmentId>",
});
Response response = client.CompleteJob("<jobId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CompleteJob with all parameters and request content.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    assignmentId = "<assignmentId>",
    note = "<note>",
});
Response response = client.CompleteJob("<jobId>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CompleteJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CompleteJobAsync (string jobId, Azure.Communication.JobRouter.CompleteJobOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CompleteJobAsync(string jobId, class Azure.Communication.JobRouter.CompleteJobOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CompleteJobAsync(System.String,Azure.Communication.JobRouter.CompleteJobOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompleteJobAsync (jobId As String, options As CompleteJobOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CompleteJobAsync : string * Azure.Communication.JobRouter.CompleteJobOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CompleteJobAsync : string * Azure.Communication.JobRouter.CompleteJobOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.CompleteJobAsync (jobId, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CompleteJobOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="options"> Request model for completing job. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Completes an assigned job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="options" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call CompleteJobAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

CompleteJobOptions options = new CompleteJobOptions("<assignmentId>");
Response response = await client.CompleteJobAsync("<jobId>", options);
]]></code>
This sample shows how to call CompleteJobAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

CompleteJobOptions options = new CompleteJobOptions("<assignmentId>")
{
    Note = "<note>",
};
Response response = await client.CompleteJobAsync("<jobId>", options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CompleteJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; CompleteJobAsync (string jobId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; CompleteJobAsync(string jobId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CompleteJobAsync(System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompleteJobAsync (jobId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member CompleteJobAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.CompleteJobAsync : string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.CompleteJobAsync (jobId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Completes an assigned job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.CompleteJobAsync(System.String,Azure.Communication.JobRouter.CompleteJobOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call CompleteJobAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    assignmentId = "<assignmentId>",
});
Response response = await client.CompleteJobAsync("<jobId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call CompleteJobAsync with all parameters and request content.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    assignmentId = "<assignmentId>",
    note = "<note>",
});
Response response = await client.CompleteJobAsync("<jobId>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt; CreateJob (Azure.Communication.JobRouter.CreateJobOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterJob&gt; CreateJob(class Azure.Communication.JobRouter.CreateJobOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CreateJob(Azure.Communication.JobRouter.CreateJobOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateJob (options As CreateJobOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouterJob)" />
      <MemberSignature Language="F#" Value="abstract member CreateJob : Azure.Communication.JobRouter.CreateJobOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&#xA;override this.CreateJob : Azure.Communication.JobRouter.CreateJobOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;" Usage="jobRouterClient.CreateJob (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateJobOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Options for creating job with direct queue assignment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new job to be routed. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt; CreateJobAsync (Azure.Communication.JobRouter.CreateJobOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterJob&gt;&gt; CreateJobAsync(class Azure.Communication.JobRouter.CreateJobOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CreateJobAsync(Azure.Communication.JobRouter.CreateJobOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateJobAsync (options As CreateJobOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouterJob))" />
      <MemberSignature Language="F#" Value="abstract member CreateJobAsync : Azure.Communication.JobRouter.CreateJobOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt;&#xA;override this.CreateJobAsync : Azure.Communication.JobRouter.CreateJobOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt;" Usage="jobRouterClient.CreateJobAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateJobOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Options for creating job with direct queue assignment. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new job to be routed. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateJobWithClassificationPolicy">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt; CreateJobWithClassificationPolicy (Azure.Communication.JobRouter.CreateJobWithClassificationPolicyOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterJob&gt; CreateJobWithClassificationPolicy(class Azure.Communication.JobRouter.CreateJobWithClassificationPolicyOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CreateJobWithClassificationPolicy(Azure.Communication.JobRouter.CreateJobWithClassificationPolicyOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateJobWithClassificationPolicy (options As CreateJobWithClassificationPolicyOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouterJob)" />
      <MemberSignature Language="F#" Value="abstract member CreateJobWithClassificationPolicy : Azure.Communication.JobRouter.CreateJobWithClassificationPolicyOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&#xA;override this.CreateJobWithClassificationPolicy : Azure.Communication.JobRouter.CreateJobWithClassificationPolicyOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;" Usage="jobRouterClient.CreateJobWithClassificationPolicy (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateJobWithClassificationPolicyOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Options for creating job with classification properties. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new job to be routed with classification property. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateJobWithClassificationPolicyAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt; CreateJobWithClassificationPolicyAsync (Azure.Communication.JobRouter.CreateJobWithClassificationPolicyOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterJob&gt;&gt; CreateJobWithClassificationPolicyAsync(class Azure.Communication.JobRouter.CreateJobWithClassificationPolicyOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CreateJobWithClassificationPolicyAsync(Azure.Communication.JobRouter.CreateJobWithClassificationPolicyOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateJobWithClassificationPolicyAsync (options As CreateJobWithClassificationPolicyOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouterJob))" />
      <MemberSignature Language="F#" Value="abstract member CreateJobWithClassificationPolicyAsync : Azure.Communication.JobRouter.CreateJobWithClassificationPolicyOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt;&#xA;override this.CreateJobWithClassificationPolicyAsync : Azure.Communication.JobRouter.CreateJobWithClassificationPolicyOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt;" Usage="jobRouterClient.CreateJobWithClassificationPolicyAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateJobWithClassificationPolicyOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Options for creating job with classification properties. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Creates a new job to be routed with classification property. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorker">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt; CreateWorker (Azure.Communication.JobRouter.CreateWorkerOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterWorker&gt; CreateWorker(class Azure.Communication.JobRouter.CreateWorkerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CreateWorker(Azure.Communication.JobRouter.CreateWorkerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateWorker (options As CreateWorkerOptions, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouterWorker)" />
      <MemberSignature Language="F#" Value="abstract member CreateWorker : Azure.Communication.JobRouter.CreateWorkerOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&#xA;override this.CreateWorker : Azure.Communication.JobRouter.CreateWorkerOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;" Usage="jobRouterClient.CreateWorker (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateWorkerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Options for creating a router worker. </param>
        <param name="cancellationToken"> (Optional) The cancellation token to use. </param>
        <summary> Create or update a worker to process jobs. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateWorkerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&gt; CreateWorkerAsync (Azure.Communication.JobRouter.CreateWorkerOptions options, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterWorker&gt;&gt; CreateWorkerAsync(class Azure.Communication.JobRouter.CreateWorkerOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.CreateWorkerAsync(Azure.Communication.JobRouter.CreateWorkerOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateWorkerAsync (options As CreateWorkerOptions, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouterWorker))" />
      <MemberSignature Language="F#" Value="abstract member CreateWorkerAsync : Azure.Communication.JobRouter.CreateWorkerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&gt;&#xA;override this.CreateWorkerAsync : Azure.Communication.JobRouter.CreateWorkerOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&gt;" Usage="jobRouterClient.CreateWorkerAsync (options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Azure.Communication.JobRouter.CreateWorkerOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="options"> Options for creating a router worker. </param>
        <param name="cancellationToken"> (Optional) The cancellation token to use. </param>
        <summary> Create or update a worker to process jobs. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="DeclineJobOffer">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeclineJobOffer (string workerId, string offerId, Azure.Communication.JobRouter.DeclineJobOfferOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeclineJobOffer(string workerId, string offerId, class Azure.Communication.JobRouter.DeclineJobOfferOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.DeclineJobOffer(System.String,System.String,Azure.Communication.JobRouter.DeclineJobOfferOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeclineJobOffer (workerId As String, offerId As String, Optional options As DeclineJobOfferOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeclineJobOffer : string * string * Azure.Communication.JobRouter.DeclineJobOfferOptions * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.DeclineJobOffer : string * string * Azure.Communication.JobRouter.DeclineJobOfferOptions * System.Threading.CancellationToken -&gt; Azure.Response" Usage="jobRouterClient.DeclineJobOffer (workerId, offerId, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="offerId" Type="System.String" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.DeclineJobOfferOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="offerId"> Id of the offer. </param>
        <param name="options"> Request model for declining offer. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Declines an offer to work on a job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DeclineJobOffer.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.DeclineJobOffer("<workerId>", "<offerId>");
]]></code>
This sample shows how to call DeclineJobOffer with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

DeclineJobOfferOptions options = new DeclineJobOfferOptions
{
    RetryOfferAt = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
};
Response response = client.DeclineJobOffer("<workerId>", "<offerId>", options: options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeclineJobOffer">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeclineJobOffer (string workerId, string offerId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeclineJobOffer(string workerId, string offerId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.DeclineJobOffer(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeclineJobOffer (workerId As String, offerId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeclineJobOffer : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeclineJobOffer : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.DeclineJobOffer (workerId, offerId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="offerId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="offerId"> Id of the offer. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Declines an offer to work on a job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.DeclineJobOffer(System.String,System.String,Azure.Communication.JobRouter.DeclineJobOfferOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeclineJobOffer.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = null;
Response response = client.DeclineJobOffer("<workerId>", "<offerId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeclineJobOffer with all parameters and request content.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    retryOfferAt = "2022-05-10T14:57:31.2311892-04:00",
});
Response response = client.DeclineJobOffer("<workerId>", "<offerId>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeclineJobOfferAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeclineJobOfferAsync (string workerId, string offerId, Azure.Communication.JobRouter.DeclineJobOfferOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeclineJobOfferAsync(string workerId, string offerId, class Azure.Communication.JobRouter.DeclineJobOfferOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.DeclineJobOfferAsync(System.String,System.String,Azure.Communication.JobRouter.DeclineJobOfferOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeclineJobOfferAsync (workerId As String, offerId As String, Optional options As DeclineJobOfferOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeclineJobOfferAsync : string * string * Azure.Communication.JobRouter.DeclineJobOfferOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeclineJobOfferAsync : string * string * Azure.Communication.JobRouter.DeclineJobOfferOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.DeclineJobOfferAsync (workerId, offerId, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="offerId" Type="System.String" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.DeclineJobOfferOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="offerId"> Id of the offer. </param>
        <param name="options"> Request model for declining offer. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Declines an offer to work on a job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call DeclineJobOfferAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.DeclineJobOfferAsync("<workerId>", "<offerId>");
]]></code>
This sample shows how to call DeclineJobOfferAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

DeclineJobOfferOptions options = new DeclineJobOfferOptions
{
    RetryOfferAt = DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"),
};
Response response = await client.DeclineJobOfferAsync("<workerId>", "<offerId>", options: options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeclineJobOfferAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeclineJobOfferAsync (string workerId, string offerId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeclineJobOfferAsync(string workerId, string offerId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.DeclineJobOfferAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeclineJobOfferAsync (workerId As String, offerId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeclineJobOfferAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeclineJobOfferAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.DeclineJobOfferAsync (workerId, offerId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="offerId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="offerId"> Id of the offer. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Declines an offer to work on a job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.DeclineJobOfferAsync(System.String,System.String,Azure.Communication.JobRouter.DeclineJobOfferOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> or <paramref name="offerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeclineJobOfferAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = null;
Response response = await client.DeclineJobOfferAsync("<workerId>", "<offerId>", content);

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeclineJobOfferAsync with all parameters and request content.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    retryOfferAt = "2022-05-10T14:57:31.2311892-04:00",
});
Response response = await client.DeclineJobOfferAsync("<workerId>", "<offerId>", content);

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteJob (string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteJob(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.DeleteJob(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteJob (jobId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteJob : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteJob : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.DeleteJob (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The id of the job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a job and all of its traces.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteJob.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.DeleteJob("<jobId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteJob with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.DeleteJob("<jobId>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteJobAsync (string jobId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteJobAsync(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.DeleteJobAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteJobAsync (jobId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteJobAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteJobAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.DeleteJobAsync (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The id of the job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a job and all of its traces.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteJobAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.DeleteJobAsync("<jobId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteJobAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.DeleteJobAsync("<jobId>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteWorker">
      <MemberSignature Language="C#" Value="public virtual Azure.Response DeleteWorker (string workerId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response DeleteWorker(string workerId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.DeleteWorker(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteWorker (workerId As String, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member DeleteWorker : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.DeleteWorker : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.DeleteWorker (workerId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a worker and all of its traces.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteWorker.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.DeleteWorker("<workerId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteWorker with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.DeleteWorker("<workerId>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteWorkerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; DeleteWorkerAsync (string workerId, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; DeleteWorkerAsync(string workerId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.DeleteWorkerAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function DeleteWorkerAsync (workerId As String, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member DeleteWorkerAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.DeleteWorkerAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.DeleteWorkerAsync (workerId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Deletes a worker and all of its traces.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call DeleteWorkerAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.DeleteWorkerAsync("<workerId>");

Console.WriteLine(response.Status);
]]></code>
This sample shows how to call DeleteWorkerAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.DeleteWorkerAsync("<workerId>");

Console.WriteLine(response.Status);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetJob (string jobId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetJob(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetJob(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJob (jobId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetJob : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetJob : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.GetJob (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The id of the job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing job by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.GetJob(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJob and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.GetJob("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("etag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call GetJob with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.GetJob("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("etag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("channelReference").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
Console.WriteLine(result.GetProperty("channelId").ToString());
Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("priority").ToString());
Console.WriteLine(result.GetProperty("dispositionCode").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("notes")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("notes")[0].GetProperty("addedAt").ToString());
Console.WriteLine(result.GetProperty("scheduledAt").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("kind").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt; GetJob (string jobId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterJob&gt; GetJob(string jobId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetJob(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJob (jobId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouterJob)" />
      <MemberSignature Language="F#" Value="abstract member GetJob : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&#xA;override this.GetJob : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;" Usage="jobRouterClient.GetJob (jobId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The id of the job. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing job by Id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetJob.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterJob> response = client.GetJob("<jobId>");
]]></code>
This sample shows how to call GetJob with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterJob> response = client.GetJob("<jobId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetJobAsync (string jobId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetJobAsync(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetJobAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobAsync (jobId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetJobAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetJobAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.GetJobAsync (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The id of the job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing job by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.GetJobAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobAsync and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.GetJobAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("etag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call GetJobAsync with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.GetJobAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("etag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("channelReference").ToString());
Console.WriteLine(result.GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
Console.WriteLine(result.GetProperty("channelId").ToString());
Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("priority").ToString());
Console.WriteLine(result.GetProperty("dispositionCode").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("notes")[0].GetProperty("message").ToString());
Console.WriteLine(result.GetProperty("notes")[0].GetProperty("addedAt").ToString());
Console.WriteLine(result.GetProperty("scheduledAt").ToString());
Console.WriteLine(result.GetProperty("matchingMode").GetProperty("kind").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt; GetJobAsync (string jobId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterJob&gt;&gt; GetJobAsync(string jobId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetJobAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobAsync (jobId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouterJob))" />
      <MemberSignature Language="F#" Value="abstract member GetJobAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt;&#xA;override this.GetJobAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt;" Usage="jobRouterClient.GetJobAsync (jobId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The id of the job. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing job by Id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetJobAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterJob> response = await client.GetJobAsync("<jobId>");
]]></code>
This sample shows how to call GetJobAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterJob> response = await client.GetJobAsync("<jobId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobs">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Communication.JobRouter.RouterJob&gt; GetJobs (int? maxpagesize = default, Azure.Communication.JobRouter.RouterJobStatusSelector? status = default, string queueId = default, string channelId = default, string classificationPolicyId = default, DateTimeOffset? scheduledBefore = default, DateTimeOffset? scheduledAfter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Communication.JobRouter.RouterJob&gt; GetJobs(valuetype System.Nullable`1&lt;int32&gt; maxpagesize, valuetype System.Nullable`1&lt;valuetype Azure.Communication.JobRouter.RouterJobStatusSelector&gt; status, string queueId, string channelId, string classificationPolicyId, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; scheduledBefore, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; scheduledAfter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetJobs(System.Nullable{System.Int32},System.Nullable{Azure.Communication.JobRouter.RouterJobStatusSelector},System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobs (Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional status As Nullable(Of RouterJobStatusSelector) = Nothing, Optional queueId As String = Nothing, Optional channelId As String = Nothing, Optional classificationPolicyId As String = Nothing, Optional scheduledBefore As Nullable(Of DateTimeOffset) = Nothing, Optional scheduledAfter As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of RouterJob)" />
      <MemberSignature Language="F#" Value="abstract member GetJobs : Nullable&lt;int&gt; * Nullable&lt;Azure.Communication.JobRouter.RouterJobStatusSelector&gt; * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Communication.JobRouter.RouterJob&gt;&#xA;override this.GetJobs : Nullable&lt;int&gt; * Nullable&lt;Azure.Communication.JobRouter.RouterJobStatusSelector&gt; * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Communication.JobRouter.RouterJob&gt;" Usage="jobRouterClient.GetJobs (maxpagesize, status, queueId, channelId, classificationPolicyId, scheduledBefore, scheduledAfter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Communication.JobRouter.RouterJob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="status" Type="System.Nullable&lt;Azure.Communication.JobRouter.RouterJobStatusSelector&gt;" />
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="classificationPolicyId" Type="System.String" />
        <Parameter Name="scheduledBefore" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="scheduledAfter" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="maxpagesize"> Number of objects to return per page. </param>
        <param name="status"> If specified, filter jobs by status. </param>
        <param name="queueId"> If specified, filter jobs by queue. </param>
        <param name="channelId"> If specified, filter jobs by channel. </param>
        <param name="classificationPolicyId"> If specified, filter jobs by classificationPolicy. </param>
        <param name="scheduledBefore">
            If specified, filter on jobs that was scheduled before or at given timestamp.
            Range: (-Inf, scheduledBefore].
            </param>
        <param name="scheduledAfter">
            If specified, filter on jobs that was scheduled at or after given value. Range:
            [scheduledAfter, +Inf).
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves list of jobs based on filter parameters. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetJobs.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

foreach (RouterJob item in client.GetJobs())
{
}
]]></code>
This sample shows how to call GetJobs with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

foreach (RouterJob item in client.GetJobs(maxpagesize: 1234, status: RouterJobStatusSelector.All, queueId: "<queueId>", channelId: "<channelId>", classificationPolicyId: "<classificationPolicyId>", scheduledBefore: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), scheduledAfter: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobs">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetJobs (int? maxpagesize, string status, string queueId, string channelId, string classificationPolicyId, DateTimeOffset? scheduledBefore, DateTimeOffset? scheduledAfter, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetJobs(valuetype System.Nullable`1&lt;int32&gt; maxpagesize, string status, string queueId, string channelId, string classificationPolicyId, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; scheduledBefore, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; scheduledAfter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetJobs(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobs (maxpagesize As Nullable(Of Integer), status As String, queueId As String, channelId As String, classificationPolicyId As String, scheduledBefore As Nullable(Of DateTimeOffset), scheduledAfter As Nullable(Of DateTimeOffset), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetJobs : Nullable&lt;int&gt; * string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetJobs : Nullable&lt;int&gt; * string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="jobRouterClient.GetJobs (maxpagesize, status, queueId, channelId, classificationPolicyId, scheduledBefore, scheduledAfter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="status" Type="System.String" />
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="classificationPolicyId" Type="System.String" />
        <Parameter Name="scheduledBefore" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="scheduledAfter" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxpagesize"> Number of objects to return per page. </param>
        <param name="status"> If specified, filter jobs by status. Allowed values: "all" | "pendingClassification" | "queued" | "assigned" | "completed" | "closed" | "cancelled" | "classificationFailed" | "created" | "pendingSchedule" | "scheduled" | "scheduleFailed" | "waitingForActivation" | "active". </param>
        <param name="queueId"> If specified, filter jobs by queue. </param>
        <param name="channelId"> If specified, filter jobs by channel. </param>
        <param name="classificationPolicyId"> If specified, filter jobs by classificationPolicy. </param>
        <param name="scheduledBefore">
            If specified, filter on jobs that was scheduled before or at given timestamp.
            Range: (-Inf, scheduledBefore].
            </param>
        <param name="scheduledAfter">
            If specified, filter on jobs that was scheduled at or after given value. Range:
            [scheduledAfter, +Inf).
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves list of jobs based on filter parameters.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.GetJobs(System.Nullable{System.Int32},System.Nullable{Azure.Communication.JobRouter.RouterJobStatusSelector},System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobs and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

foreach (BinaryData item in client.GetJobs(null, null, null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("etag").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
}
]]></code>
This sample shows how to call GetJobs with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

foreach (BinaryData item in client.GetJobs(1234, "all", "<queueId>", "<channelId>", "<classificationPolicyId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("etag").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("channelReference").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
    Console.WriteLine(result.GetProperty("channelId").ToString());
    Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
    Console.WriteLine(result.GetProperty("queueId").ToString());
    Console.WriteLine(result.GetProperty("priority").ToString());
    Console.WriteLine(result.GetProperty("dispositionCode").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
    Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
    Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
    Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
    Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
    Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("notes")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("notes")[0].GetProperty("addedAt").ToString());
    Console.WriteLine(result.GetProperty("scheduledAt").ToString());
    Console.WriteLine(result.GetProperty("matchingMode").GetProperty("kind").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Communication.JobRouter.RouterJob&gt; GetJobsAsync (int? maxpagesize = default, Azure.Communication.JobRouter.RouterJobStatusSelector? status = default, string queueId = default, string channelId = default, string classificationPolicyId = default, DateTimeOffset? scheduledBefore = default, DateTimeOffset? scheduledAfter = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Communication.JobRouter.RouterJob&gt; GetJobsAsync(valuetype System.Nullable`1&lt;int32&gt; maxpagesize, valuetype System.Nullable`1&lt;valuetype Azure.Communication.JobRouter.RouterJobStatusSelector&gt; status, string queueId, string channelId, string classificationPolicyId, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; scheduledBefore, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; scheduledAfter, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetJobsAsync(System.Nullable{System.Int32},System.Nullable{Azure.Communication.JobRouter.RouterJobStatusSelector},System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobsAsync (Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional status As Nullable(Of RouterJobStatusSelector) = Nothing, Optional queueId As String = Nothing, Optional channelId As String = Nothing, Optional classificationPolicyId As String = Nothing, Optional scheduledBefore As Nullable(Of DateTimeOffset) = Nothing, Optional scheduledAfter As Nullable(Of DateTimeOffset) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of RouterJob)" />
      <MemberSignature Language="F#" Value="abstract member GetJobsAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.Communication.JobRouter.RouterJobStatusSelector&gt; * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Communication.JobRouter.RouterJob&gt;&#xA;override this.GetJobsAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.Communication.JobRouter.RouterJobStatusSelector&gt; * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Communication.JobRouter.RouterJob&gt;" Usage="jobRouterClient.GetJobsAsync (maxpagesize, status, queueId, channelId, classificationPolicyId, scheduledBefore, scheduledAfter, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Communication.JobRouter.RouterJob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="status" Type="System.Nullable&lt;Azure.Communication.JobRouter.RouterJobStatusSelector&gt;" />
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="classificationPolicyId" Type="System.String" />
        <Parameter Name="scheduledBefore" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="scheduledAfter" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="maxpagesize"> Number of objects to return per page. </param>
        <param name="status"> If specified, filter jobs by status. </param>
        <param name="queueId"> If specified, filter jobs by queue. </param>
        <param name="channelId"> If specified, filter jobs by channel. </param>
        <param name="classificationPolicyId"> If specified, filter jobs by classificationPolicy. </param>
        <param name="scheduledBefore">
            If specified, filter on jobs that was scheduled before or at given timestamp.
            Range: (-Inf, scheduledBefore].
            </param>
        <param name="scheduledAfter">
            If specified, filter on jobs that was scheduled at or after given value. Range:
            [scheduledAfter, +Inf).
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves list of jobs based on filter parameters. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetJobsAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

await foreach (RouterJob item in client.GetJobsAsync())
{
}
]]></code>
This sample shows how to call GetJobsAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

await foreach (RouterJob item in client.GetJobsAsync(maxpagesize: 1234, status: RouterJobStatusSelector.All, queueId: "<queueId>", channelId: "<channelId>", classificationPolicyId: "<classificationPolicyId>", scheduledBefore: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), scheduledAfter: DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00")))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetJobsAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetJobsAsync (int? maxpagesize, string status, string queueId, string channelId, string classificationPolicyId, DateTimeOffset? scheduledBefore, DateTimeOffset? scheduledAfter, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetJobsAsync(valuetype System.Nullable`1&lt;int32&gt; maxpagesize, string status, string queueId, string channelId, string classificationPolicyId, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; scheduledBefore, valuetype System.Nullable`1&lt;valuetype System.DateTimeOffset&gt; scheduledAfter, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetJobsAsync(System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetJobsAsync (maxpagesize As Nullable(Of Integer), status As String, queueId As String, channelId As String, classificationPolicyId As String, scheduledBefore As Nullable(Of DateTimeOffset), scheduledAfter As Nullable(Of DateTimeOffset), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetJobsAsync : Nullable&lt;int&gt; * string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetJobsAsync : Nullable&lt;int&gt; * string * string * string * string * Nullable&lt;DateTimeOffset&gt; * Nullable&lt;DateTimeOffset&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="jobRouterClient.GetJobsAsync (maxpagesize, status, queueId, channelId, classificationPolicyId, scheduledBefore, scheduledAfter, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="status" Type="System.String" />
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="classificationPolicyId" Type="System.String" />
        <Parameter Name="scheduledBefore" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="scheduledAfter" Type="System.Nullable&lt;System.DateTimeOffset&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxpagesize"> Number of objects to return per page. </param>
        <param name="status"> If specified, filter jobs by status. Allowed values: "all" | "pendingClassification" | "queued" | "assigned" | "completed" | "closed" | "cancelled" | "classificationFailed" | "created" | "pendingSchedule" | "scheduled" | "scheduleFailed" | "waitingForActivation" | "active". </param>
        <param name="queueId"> If specified, filter jobs by queue. </param>
        <param name="channelId"> If specified, filter jobs by channel. </param>
        <param name="classificationPolicyId"> If specified, filter jobs by classificationPolicy. </param>
        <param name="scheduledBefore">
            If specified, filter on jobs that was scheduled before or at given timestamp.
            Range: (-Inf, scheduledBefore].
            </param>
        <param name="scheduledAfter">
            If specified, filter on jobs that was scheduled at or after given value. Range:
            [scheduledAfter, +Inf).
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves list of jobs based on filter parameters.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.GetJobsAsync(System.Nullable{System.Int32},System.Nullable{Azure.Communication.JobRouter.RouterJobStatusSelector},System.String,System.String,System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetJobsAsync and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

await foreach (BinaryData item in client.GetJobsAsync(null, null, null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("etag").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
}
]]></code>
This sample shows how to call GetJobsAsync with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

await foreach (BinaryData item in client.GetJobsAsync(1234, "all", "<queueId>", "<channelId>", "<classificationPolicyId>", DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), DateTimeOffset.Parse("2022-05-10T14:57:31.2311892-04:00"), null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("etag").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("channelReference").ToString());
    Console.WriteLine(result.GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("enqueuedAt").ToString());
    Console.WriteLine(result.GetProperty("channelId").ToString());
    Console.WriteLine(result.GetProperty("classificationPolicyId").ToString());
    Console.WriteLine(result.GetProperty("queueId").ToString());
    Console.WriteLine(result.GetProperty("priority").ToString());
    Console.WriteLine(result.GetProperty("dispositionCode").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("key").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expedite").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("requestedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("key").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("labelOperator").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("value").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAfterSeconds").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expedite").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("status").ToString());
    Console.WriteLine(result.GetProperty("attachedWorkerSelectors")[0].GetProperty("expiresAt").ToString());
    Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignmentId").ToString());
    Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("workerId").ToString());
    Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("assignedAt").ToString());
    Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("completedAt").ToString());
    Console.WriteLine(result.GetProperty("assignments").GetProperty("<key>").GetProperty("closedAt").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("notes")[0].GetProperty("message").ToString());
    Console.WriteLine(result.GetProperty("notes")[0].GetProperty("addedAt").ToString());
    Console.WriteLine(result.GetProperty("scheduledAt").ToString());
    Console.WriteLine(result.GetProperty("matchingMode").GetProperty("kind").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetQueuePosition">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetQueuePosition (string jobId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetQueuePosition(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetQueuePosition(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueuePosition (jobId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetQueuePosition : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetQueuePosition : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.GetQueuePosition (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a job's position details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.GetQueuePosition(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetQueuePosition and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.GetQueuePosition("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("position").ToString());
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("queueLength").ToString());
Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
]]></code>
This sample shows how to call GetQueuePosition with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.GetQueuePosition("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("position").ToString());
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("queueLength").ToString());
Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetQueuePosition">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.RouterJobPositionDetails&gt; GetQueuePosition (string jobId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterJobPositionDetails&gt; GetQueuePosition(string jobId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetQueuePosition(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueuePosition (jobId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouterJobPositionDetails)" />
      <MemberSignature Language="F#" Value="abstract member GetQueuePosition : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterJobPositionDetails&gt;&#xA;override this.GetQueuePosition : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterJobPositionDetails&gt;" Usage="jobRouterClient.GetQueuePosition (jobId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.RouterJobPositionDetails&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a job's position details. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetQueuePosition.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterJobPositionDetails> response = client.GetQueuePosition("<jobId>");
]]></code>
This sample shows how to call GetQueuePosition with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterJobPositionDetails> response = client.GetQueuePosition("<jobId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetQueuePositionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetQueuePositionAsync (string jobId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetQueuePositionAsync(string jobId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetQueuePositionAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueuePositionAsync (jobId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetQueuePositionAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetQueuePositionAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.GetQueuePositionAsync (jobId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Gets a job's position details.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.GetQueuePositionAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetQueuePositionAsync and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.GetQueuePositionAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("position").ToString());
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("queueLength").ToString());
Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
]]></code>
This sample shows how to call GetQueuePositionAsync with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.GetQueuePositionAsync("<jobId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("position").ToString());
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("queueLength").ToString());
Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetQueuePositionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJobPositionDetails&gt;&gt; GetQueuePositionAsync (string jobId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterJobPositionDetails&gt;&gt; GetQueuePositionAsync(string jobId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetQueuePositionAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueuePositionAsync (jobId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouterJobPositionDetails))" />
      <MemberSignature Language="F#" Value="abstract member GetQueuePositionAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJobPositionDetails&gt;&gt;&#xA;override this.GetQueuePositionAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJobPositionDetails&gt;&gt;" Usage="jobRouterClient.GetQueuePositionAsync (jobId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJobPositionDetails&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Gets a job's position details. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetQueuePositionAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterJobPositionDetails> response = await client.GetQueuePositionAsync("<jobId>");
]]></code>
This sample shows how to call GetQueuePositionAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterJobPositionDetails> response = await client.GetQueuePositionAsync("<jobId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetQueueStatistics">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetQueueStatistics (string queueId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetQueueStatistics(string queueId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetQueueStatistics(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueueStatistics (queueId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetQueueStatistics : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetQueueStatistics : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.GetQueueStatistics (queueId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="queueId"> Id of the queue to retrieve statistics. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves a queue's statistics.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.GetQueueStatistics(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="queueId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetQueueStatistics and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.GetQueueStatistics("<queueId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
]]></code>
This sample shows how to call GetQueueStatistics with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.GetQueueStatistics("<queueId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("longestJobWaitTimeMinutes").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetQueueStatistics">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.RouterQueueStatistics&gt; GetQueueStatistics (string queueId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterQueueStatistics&gt; GetQueueStatistics(string queueId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetQueueStatistics(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueueStatistics (queueId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouterQueueStatistics)" />
      <MemberSignature Language="F#" Value="abstract member GetQueueStatistics : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterQueueStatistics&gt;&#xA;override this.GetQueueStatistics : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterQueueStatistics&gt;" Usage="jobRouterClient.GetQueueStatistics (queueId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.RouterQueueStatistics&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queueId"> Id of the queue to retrieve statistics. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves a queue's statistics. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="queueId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetQueueStatistics.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterQueueStatistics> response = client.GetQueueStatistics("<queueId>");
]]></code>
This sample shows how to call GetQueueStatistics with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterQueueStatistics> response = client.GetQueueStatistics("<queueId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetQueueStatisticsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetQueueStatisticsAsync (string queueId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetQueueStatisticsAsync(string queueId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetQueueStatisticsAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueueStatisticsAsync (queueId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetQueueStatisticsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetQueueStatisticsAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.GetQueueStatisticsAsync (queueId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="queueId"> Id of the queue to retrieve statistics. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves a queue's statistics.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.GetQueueStatisticsAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="queueId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetQueueStatisticsAsync and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.GetQueueStatisticsAsync("<queueId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
]]></code>
This sample shows how to call GetQueueStatisticsAsync with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.GetQueueStatisticsAsync("<queueId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("queueId").ToString());
Console.WriteLine(result.GetProperty("length").ToString());
Console.WriteLine(result.GetProperty("estimatedWaitTimeMinutes").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("longestJobWaitTimeMinutes").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetQueueStatisticsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueueStatistics&gt;&gt; GetQueueStatisticsAsync (string queueId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterQueueStatistics&gt;&gt; GetQueueStatisticsAsync(string queueId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetQueueStatisticsAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetQueueStatisticsAsync (queueId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouterQueueStatistics))" />
      <MemberSignature Language="F#" Value="abstract member GetQueueStatisticsAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueueStatistics&gt;&gt;&#xA;override this.GetQueueStatisticsAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueueStatistics&gt;&gt;" Usage="jobRouterClient.GetQueueStatisticsAsync (queueId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterQueueStatistics&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="queueId"> Id of the queue to retrieve statistics. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves a queue's statistics. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="queueId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="queueId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetQueueStatisticsAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterQueueStatistics> response = await client.GetQueueStatisticsAsync("<queueId>");
]]></code>
This sample shows how to call GetQueueStatisticsAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterQueueStatistics> response = await client.GetQueueStatisticsAsync("<queueId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorker">
      <MemberSignature Language="C#" Value="public virtual Azure.Response GetWorker (string workerId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response GetWorker(string workerId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetWorker(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorker (workerId As String, context As RequestContext) As Response" />
      <MemberSignature Language="F#" Value="abstract member GetWorker : string * Azure.RequestContext -&gt; Azure.Response&#xA;override this.GetWorker : string * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.GetWorker (workerId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing worker by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.GetWorker(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorker and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.GetWorker("<workerId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("etag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call GetWorker with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = client.GetWorker("<workerId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("etag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("queues")[0].ToString());
Console.WriteLine(result.GetProperty("capacity").ToString());
Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("channels")[0].GetProperty("channelId").ToString());
Console.WriteLine(result.GetProperty("channels")[0].GetProperty("capacityCostPerJob").ToString());
Console.WriteLine(result.GetProperty("channels")[0].GetProperty("maxNumberOfJobs").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
Console.WriteLine(result.GetProperty("loadRatio").ToString());
Console.WriteLine(result.GetProperty("availableForOffers").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorker">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt; GetWorker (string workerId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterWorker&gt; GetWorker(string workerId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetWorker(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorker (workerId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouterWorker)" />
      <MemberSignature Language="F#" Value="abstract member GetWorker : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&#xA;override this.GetWorker : string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;" Usage="jobRouterClient.GetWorker (workerId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing worker by Id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetWorker.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterWorker> response = client.GetWorker("<workerId>");
]]></code>
This sample shows how to call GetWorker with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterWorker> response = client.GetWorker("<workerId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; GetWorkerAsync (string workerId, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; GetWorkerAsync(string workerId, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetWorkerAsync(System.String,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkerAsync (workerId As String, context As RequestContext) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkerAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.GetWorkerAsync : string * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.GetWorkerAsync (workerId, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves an existing worker by Id.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.GetWorkerAsync(System.String,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkerAsync and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.GetWorkerAsync("<workerId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("etag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
]]></code>
This sample shows how to call GetWorkerAsync with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response response = await client.GetWorkerAsync("<workerId>", null);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("etag").ToString());
Console.WriteLine(result.GetProperty("id").ToString());
Console.WriteLine(result.GetProperty("state").ToString());
Console.WriteLine(result.GetProperty("queues")[0].ToString());
Console.WriteLine(result.GetProperty("capacity").ToString());
Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
Console.WriteLine(result.GetProperty("channels")[0].GetProperty("channelId").ToString());
Console.WriteLine(result.GetProperty("channels")[0].GetProperty("capacityCostPerJob").ToString());
Console.WriteLine(result.GetProperty("channels")[0].GetProperty("maxNumberOfJobs").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
Console.WriteLine(result.GetProperty("loadRatio").ToString());
Console.WriteLine(result.GetProperty("availableForOffers").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&gt; GetWorkerAsync (string workerId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterWorker&gt;&gt; GetWorkerAsync(string workerId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetWorkerAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkerAsync (workerId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouterWorker))" />
      <MemberSignature Language="F#" Value="abstract member GetWorkerAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&gt;&#xA;override this.GetWorkerAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&gt;" Usage="jobRouterClient.GetWorkerAsync (workerId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves an existing worker by Id. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call GetWorkerAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterWorker> response = await client.GetWorkerAsync("<workerId>");
]]></code>
This sample shows how to call GetWorkerAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<RouterWorker> response = await client.GetWorkerAsync("<workerId>");
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkers">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.Communication.JobRouter.RouterWorker&gt; GetWorkers (int? maxpagesize = default, Azure.Communication.JobRouter.RouterWorkerStateSelector? state = default, string channelId = default, string queueId = default, bool? hasCapacity = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.Communication.JobRouter.RouterWorker&gt; GetWorkers(valuetype System.Nullable`1&lt;int32&gt; maxpagesize, valuetype System.Nullable`1&lt;valuetype Azure.Communication.JobRouter.RouterWorkerStateSelector&gt; state, string channelId, string queueId, valuetype System.Nullable`1&lt;bool&gt; hasCapacity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetWorkers(System.Nullable{System.Int32},System.Nullable{Azure.Communication.JobRouter.RouterWorkerStateSelector},System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkers (Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional state As Nullable(Of RouterWorkerStateSelector) = Nothing, Optional channelId As String = Nothing, Optional queueId As String = Nothing, Optional hasCapacity As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of RouterWorker)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkers : Nullable&lt;int&gt; * Nullable&lt;Azure.Communication.JobRouter.RouterWorkerStateSelector&gt; * string * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Communication.JobRouter.RouterWorker&gt;&#xA;override this.GetWorkers : Nullable&lt;int&gt; * Nullable&lt;Azure.Communication.JobRouter.RouterWorkerStateSelector&gt; * string * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.Communication.JobRouter.RouterWorker&gt;" Usage="jobRouterClient.GetWorkers (maxpagesize, state, channelId, queueId, hasCapacity, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.Communication.JobRouter.RouterWorker&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="state" Type="System.Nullable&lt;Azure.Communication.JobRouter.RouterWorkerStateSelector&gt;" />
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="hasCapacity" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="maxpagesize"> Number of objects to return per page. </param>
        <param name="state"> If specified, select workers by worker state. </param>
        <param name="channelId"> If specified, select workers who have a channel configuration with this channel. </param>
        <param name="queueId"> If specified, select workers who are assigned to this queue. </param>
        <param name="hasCapacity">
            If set to true, select only workers who have capacity for the channel specified
            by `channelId` or for any channel if `channelId` not specified. If set to
            false, then will return all workers including workers without any capacity for
            jobs. Defaults to false.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves existing workers. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetWorkers.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

foreach (RouterWorker item in client.GetWorkers())
{
}
]]></code>
This sample shows how to call GetWorkers with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

foreach (RouterWorker item in client.GetWorkers(maxpagesize: 1234, state: RouterWorkerStateSelector.Active, channelId: "<channelId>", queueId: "<queueId>", hasCapacity: true))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkers">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;BinaryData&gt; GetWorkers (int? maxpagesize, string state, string channelId, string queueId, bool? hasCapacity, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class System.BinaryData&gt; GetWorkers(valuetype System.Nullable`1&lt;int32&gt; maxpagesize, string state, string channelId, string queueId, valuetype System.Nullable`1&lt;bool&gt; hasCapacity, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetWorkers(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkers (maxpagesize As Nullable(Of Integer), state As String, channelId As String, queueId As String, hasCapacity As Nullable(Of Boolean), context As RequestContext) As Pageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkers : Nullable&lt;int&gt; * string * string * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;&#xA;override this.GetWorkers : Nullable&lt;int&gt; * string * string * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Pageable&lt;BinaryData&gt;" Usage="jobRouterClient.GetWorkers (maxpagesize, state, channelId, queueId, hasCapacity, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="state" Type="System.String" />
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="hasCapacity" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxpagesize"> Number of objects to return per page. </param>
        <param name="state"> If specified, select workers by worker state. Allowed values: "active" | "draining" | "inactive" | "all". </param>
        <param name="channelId"> If specified, select workers who have a channel configuration with this channel. </param>
        <param name="queueId"> If specified, select workers who are assigned to this queue. </param>
        <param name="hasCapacity">
            If set to true, select only workers who have capacity for the channel specified
            by `channelId` or for any channel if `channelId` not specified. If set to
            false, then will return all workers including workers without any capacity for
            jobs. Defaults to false.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves existing workers.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.GetWorkers(System.Nullable{System.Int32},System.Nullable{Azure.Communication.JobRouter.RouterWorkerStateSelector},System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.Pageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkers and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

foreach (BinaryData item in client.GetWorkers(null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("etag").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
}
]]></code>
This sample shows how to call GetWorkers with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

foreach (BinaryData item in client.GetWorkers(1234, "active", "<channelId>", "<queueId>", true, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("etag").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("queues")[0].ToString());
    Console.WriteLine(result.GetProperty("capacity").ToString());
    Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("channels")[0].GetProperty("channelId").ToString());
    Console.WriteLine(result.GetProperty("channels")[0].GetProperty("capacityCostPerJob").ToString());
    Console.WriteLine(result.GetProperty("channels")[0].GetProperty("maxNumberOfJobs").ToString());
    Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
    Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
    Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
    Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
    Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
    Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
    Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
    Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
    Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
    Console.WriteLine(result.GetProperty("loadRatio").ToString());
    Console.WriteLine(result.GetProperty("availableForOffers").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.Communication.JobRouter.RouterWorker&gt; GetWorkersAsync (int? maxpagesize = default, Azure.Communication.JobRouter.RouterWorkerStateSelector? state = default, string channelId = default, string queueId = default, bool? hasCapacity = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.Communication.JobRouter.RouterWorker&gt; GetWorkersAsync(valuetype System.Nullable`1&lt;int32&gt; maxpagesize, valuetype System.Nullable`1&lt;valuetype Azure.Communication.JobRouter.RouterWorkerStateSelector&gt; state, string channelId, string queueId, valuetype System.Nullable`1&lt;bool&gt; hasCapacity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetWorkersAsync(System.Nullable{System.Int32},System.Nullable{Azure.Communication.JobRouter.RouterWorkerStateSelector},System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkersAsync (Optional maxpagesize As Nullable(Of Integer) = Nothing, Optional state As Nullable(Of RouterWorkerStateSelector) = Nothing, Optional channelId As String = Nothing, Optional queueId As String = Nothing, Optional hasCapacity As Nullable(Of Boolean) = Nothing, Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of RouterWorker)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkersAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.Communication.JobRouter.RouterWorkerStateSelector&gt; * string * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Communication.JobRouter.RouterWorker&gt;&#xA;override this.GetWorkersAsync : Nullable&lt;int&gt; * Nullable&lt;Azure.Communication.JobRouter.RouterWorkerStateSelector&gt; * string * string * Nullable&lt;bool&gt; * System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.Communication.JobRouter.RouterWorker&gt;" Usage="jobRouterClient.GetWorkersAsync (maxpagesize, state, channelId, queueId, hasCapacity, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.Communication.JobRouter.RouterWorker&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="state" Type="System.Nullable&lt;Azure.Communication.JobRouter.RouterWorkerStateSelector&gt;" />
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="hasCapacity" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="maxpagesize"> Number of objects to return per page. </param>
        <param name="state"> If specified, select workers by worker state. </param>
        <param name="channelId"> If specified, select workers who have a channel configuration with this channel. </param>
        <param name="queueId"> If specified, select workers who are assigned to this queue. </param>
        <param name="hasCapacity">
            If set to true, select only workers who have capacity for the channel specified
            by `channelId` or for any channel if `channelId` not specified. If set to
            false, then will return all workers including workers without any capacity for
            jobs. Defaults to false.
            </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Retrieves existing workers. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <example>
This sample shows how to call GetWorkersAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

await foreach (RouterWorker item in client.GetWorkersAsync())
{
}
]]></code>
This sample shows how to call GetWorkersAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

await foreach (RouterWorker item in client.GetWorkersAsync(maxpagesize: 1234, state: RouterWorkerStateSelector.Active, channelId: "<channelId>", queueId: "<queueId>", hasCapacity: true))
{
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetWorkersAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;BinaryData&gt; GetWorkersAsync (int? maxpagesize, string state, string channelId, string queueId, bool? hasCapacity, Azure.RequestContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class System.BinaryData&gt; GetWorkersAsync(valuetype System.Nullable`1&lt;int32&gt; maxpagesize, string state, string channelId, string queueId, valuetype System.Nullable`1&lt;bool&gt; hasCapacity, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.GetWorkersAsync(System.Nullable{System.Int32},System.String,System.String,System.String,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetWorkersAsync (maxpagesize As Nullable(Of Integer), state As String, channelId As String, queueId As String, hasCapacity As Nullable(Of Boolean), context As RequestContext) As AsyncPageable(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member GetWorkersAsync : Nullable&lt;int&gt; * string * string * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;&#xA;override this.GetWorkersAsync : Nullable&lt;int&gt; * string * string * string * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.AsyncPageable&lt;BinaryData&gt;" Usage="jobRouterClient.GetWorkersAsync (maxpagesize, state, channelId, queueId, hasCapacity, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxpagesize" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="state" Type="System.String" />
        <Parameter Name="channelId" Type="System.String" />
        <Parameter Name="queueId" Type="System.String" />
        <Parameter Name="hasCapacity" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="maxpagesize"> Number of objects to return per page. </param>
        <param name="state"> If specified, select workers by worker state. Allowed values: "active" | "draining" | "inactive" | "all". </param>
        <param name="channelId"> If specified, select workers who have a channel configuration with this channel. </param>
        <param name="queueId"> If specified, select workers who are assigned to this queue. </param>
        <param name="hasCapacity">
            If set to true, select only workers who have capacity for the channel specified
            by `channelId` or for any channel if `channelId` not specified. If set to
            false, then will return all workers including workers without any capacity for
            jobs. Defaults to false.
            </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Retrieves existing workers.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.GetWorkersAsync(System.Nullable{System.Int32},System.Nullable{Azure.Communication.JobRouter.RouterWorkerStateSelector},System.String,System.String,System.Nullable{System.Boolean},System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The <see cref="T:Azure.AsyncPageable`1" /> from the service containing a list of <see cref="T:System.BinaryData" /> objects. Details of the body schema for each item in the collection are in the Remarks section below. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call GetWorkersAsync and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

await foreach (BinaryData item in client.GetWorkersAsync(null, null, null, null, null, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("etag").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
}
]]></code>
This sample shows how to call GetWorkersAsync with all parameters and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

await foreach (BinaryData item in client.GetWorkersAsync(1234, "active", "<channelId>", "<queueId>", true, null))
{
    JsonElement result = JsonDocument.Parse(item.ToStream()).RootElement;
    Console.WriteLine(result.GetProperty("etag").ToString());
    Console.WriteLine(result.GetProperty("id").ToString());
    Console.WriteLine(result.GetProperty("state").ToString());
    Console.WriteLine(result.GetProperty("queues")[0].ToString());
    Console.WriteLine(result.GetProperty("capacity").ToString());
    Console.WriteLine(result.GetProperty("labels").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("tags").GetProperty("<key>").ToString());
    Console.WriteLine(result.GetProperty("channels")[0].GetProperty("channelId").ToString());
    Console.WriteLine(result.GetProperty("channels")[0].GetProperty("capacityCostPerJob").ToString());
    Console.WriteLine(result.GetProperty("channels")[0].GetProperty("maxNumberOfJobs").ToString());
    Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offerId").ToString());
    Console.WriteLine(result.GetProperty("offers")[0].GetProperty("jobId").ToString());
    Console.WriteLine(result.GetProperty("offers")[0].GetProperty("capacityCost").ToString());
    Console.WriteLine(result.GetProperty("offers")[0].GetProperty("offeredAt").ToString());
    Console.WriteLine(result.GetProperty("offers")[0].GetProperty("expiresAt").ToString());
    Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignmentId").ToString());
    Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("jobId").ToString());
    Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("capacityCost").ToString());
    Console.WriteLine(result.GetProperty("assignedJobs")[0].GetProperty("assignedAt").ToString());
    Console.WriteLine(result.GetProperty("loadRatio").ToString());
    Console.WriteLine(result.GetProperty("availableForOffers").ToString());
}
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.Communication.JobRouter.JobRouterClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.Communication.JobRouter.JobRouterClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReclassifyJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response ReclassifyJob (string jobId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response ReclassifyJob(string jobId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.ReclassifyJob(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReclassifyJob (jobId As String, Optional cancellationToken As CancellationToken = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member ReclassifyJob : string * System.Threading.CancellationToken -&gt; Azure.Response&#xA;override this.ReclassifyJob : string * System.Threading.CancellationToken -&gt; Azure.Response" Usage="jobRouterClient.ReclassifyJob (jobId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The id of the job. </param>
        <param name="cancellationToken"> (Optional) The cancellation token to use. </param>
        <summary> Reclassify a job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />
        </exception>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReclassifyJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; ReclassifyJobAsync (string jobId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; ReclassifyJobAsync(string jobId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.ReclassifyJobAsync(System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReclassifyJobAsync (jobId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member ReclassifyJobAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.ReclassifyJobAsync : string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.ReclassifyJobAsync (jobId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> The id of the job. </param>
        <param name="cancellationToken"> (Optional) The cancellation token to use. </param>
        <summary> Reclassify a job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" />
        </exception>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="UnassignJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.UnassignJobResult&gt; UnassignJob (string jobId, string assignmentId, Azure.Communication.JobRouter.UnassignJobOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.UnassignJobResult&gt; UnassignJob(string jobId, string assignmentId, class Azure.Communication.JobRouter.UnassignJobOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.UnassignJob(System.String,System.String,Azure.Communication.JobRouter.UnassignJobOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UnassignJob (jobId As String, assignmentId As String, Optional options As UnassignJobOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of UnassignJobResult)" />
      <MemberSignature Language="F#" Value="abstract member UnassignJob : string * string * Azure.Communication.JobRouter.UnassignJobOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.UnassignJobResult&gt;&#xA;override this.UnassignJob : string * string * Azure.Communication.JobRouter.UnassignJobOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.UnassignJobResult&gt;" Usage="jobRouterClient.UnassignJob (jobId, assignmentId, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.UnassignJobResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="assignmentId" Type="System.String" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.UnassignJobOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job to un-assign. </param>
        <param name="assignmentId"> Id of the assignment to un-assign. </param>
        <param name="options"> Request body for unassign route. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Un-assign a job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="assignmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="assignmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call UnassignJob.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<UnassignJobResult> response = client.UnassignJob("<jobId>", "<assignmentId>");
]]></code>
This sample shows how to call UnassignJob with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

UnassignJobOptions options = new UnassignJobOptions
{
    SuspendMatching = true,
};
Response<UnassignJobResult> response = client.UnassignJob("<jobId>", "<assignmentId>", options: options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UnassignJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UnassignJob (string jobId, string assignmentId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UnassignJob(string jobId, string assignmentId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.UnassignJob(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UnassignJob (jobId As String, assignmentId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UnassignJob : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UnassignJob : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.UnassignJob (jobId, assignmentId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="assignmentId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job to un-assign. </param>
        <param name="assignmentId"> Id of the assignment to un-assign. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Un-assign a job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.UnassignJob(System.String,System.String,Azure.Communication.JobRouter.UnassignJobOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="assignmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="assignmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UnassignJob and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = null;
Response response = client.UnassignJob("<jobId>", "<assignmentId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
]]></code>
This sample shows how to call UnassignJob with all parameters and request content and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    suspendMatching = true,
});
Response response = client.UnassignJob("<jobId>", "<assignmentId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UnassignJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.UnassignJobResult&gt;&gt; UnassignJobAsync (string jobId, string assignmentId, Azure.Communication.JobRouter.UnassignJobOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.UnassignJobResult&gt;&gt; UnassignJobAsync(string jobId, string assignmentId, class Azure.Communication.JobRouter.UnassignJobOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.UnassignJobAsync(System.String,System.String,Azure.Communication.JobRouter.UnassignJobOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UnassignJobAsync (jobId As String, assignmentId As String, Optional options As UnassignJobOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of UnassignJobResult))" />
      <MemberSignature Language="F#" Value="abstract member UnassignJobAsync : string * string * Azure.Communication.JobRouter.UnassignJobOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.UnassignJobResult&gt;&gt;&#xA;override this.UnassignJobAsync : string * string * Azure.Communication.JobRouter.UnassignJobOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.UnassignJobResult&gt;&gt;" Usage="jobRouterClient.UnassignJobAsync (jobId, assignmentId, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.UnassignJobResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="assignmentId" Type="System.String" />
        <Parameter Name="options" Type="Azure.Communication.JobRouter.UnassignJobOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job to un-assign. </param>
        <param name="assignmentId"> Id of the assignment to un-assign. </param>
        <param name="options"> Request body for unassign route. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Un-assign a job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="assignmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="assignmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <example>
This sample shows how to call UnassignJobAsync.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

Response<UnassignJobResult> response = await client.UnassignJobAsync("<jobId>", "<assignmentId>");
]]></code>
This sample shows how to call UnassignJobAsync with all parameters.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

UnassignJobOptions options = new UnassignJobOptions
{
    SuspendMatching = true,
};
Response<UnassignJobResult> response = await client.UnassignJobAsync("<jobId>", "<assignmentId>", options: options);
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UnassignJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UnassignJobAsync (string jobId, string assignmentId, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UnassignJobAsync(string jobId, string assignmentId, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.UnassignJobAsync(System.String,System.String,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UnassignJobAsync (jobId As String, assignmentId As String, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UnassignJobAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UnassignJobAsync : string * string * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.UnassignJobAsync (jobId, assignmentId, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="assignmentId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Id of the job to un-assign. </param>
        <param name="assignmentId"> Id of the assignment to un-assign. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Un-assign a job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item><item><description>
            Please try the simpler <see cref="M:Azure.Communication.JobRouter.JobRouterClient.UnassignJobAsync(System.String,System.String,Azure.Communication.JobRouter.UnassignJobOptions,System.Threading.CancellationToken)" /> convenience overload with strongly typed models first.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="assignmentId" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> or <paramref name="assignmentId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
        <example>
This sample shows how to call UnassignJobAsync and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = null;
Response response = await client.UnassignJobAsync("<jobId>", "<assignmentId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
]]></code>
This sample shows how to call UnassignJobAsync with all parameters and request content and parse the result.
<code><![CDATA[
JobRouterClient client = new JobRouterClient((string)null);

using RequestContent content = RequestContent.Create(new
{
    suspendMatching = true,
});
Response response = await client.UnassignJobAsync("<jobId>", "<assignmentId>", content);

JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
Console.WriteLine(result.GetProperty("jobId").ToString());
Console.WriteLine(result.GetProperty("unassignmentCount").ToString());
]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="UpdateJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt; UpdateJob (Azure.Communication.JobRouter.RouterJob job, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterJob&gt; UpdateJob(class Azure.Communication.JobRouter.RouterJob job, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.UpdateJob(Azure.Communication.JobRouter.RouterJob,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateJob (job As RouterJob, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouterJob)" />
      <MemberSignature Language="F#" Value="abstract member UpdateJob : Azure.Communication.JobRouter.RouterJob * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&#xA;override this.UpdateJob : Azure.Communication.JobRouter.RouterJob * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;" Usage="jobRouterClient.UpdateJob (job, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="job" Type="Azure.Communication.JobRouter.RouterJob" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="job"> Job to update. Uses merge-patch semantics: https://datatracker.ietf.org/doc/html/rfc7396. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Update an existing job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateJob (string jobId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateJob(string jobId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.UpdateJob(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateJob (jobId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateJob : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateJob : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.UpdateJob (jobId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The id of the job. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates a router job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt; UpdateJobAsync (Azure.Communication.JobRouter.RouterJob job, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterJob&gt;&gt; UpdateJobAsync(class Azure.Communication.JobRouter.RouterJob job, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.UpdateJobAsync(Azure.Communication.JobRouter.RouterJob,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateJobAsync (job As RouterJob, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouterJob))" />
      <MemberSignature Language="F#" Value="abstract member UpdateJobAsync : Azure.Communication.JobRouter.RouterJob * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt;&#xA;override this.UpdateJobAsync : Azure.Communication.JobRouter.RouterJob * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt;" Usage="jobRouterClient.UpdateJobAsync (job, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterJob&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="job" Type="Azure.Communication.JobRouter.RouterJob" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="job"> Job to update. Uses merge-patch semantics: https://datatracker.ietf.org/doc/html/rfc7396. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary> Update an existing job. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateJobAsync (string jobId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateJobAsync(string jobId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.UpdateJobAsync(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateJobAsync (jobId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateJobAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateJobAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.UpdateJobAsync (jobId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> The id of the job. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates a router job.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="jobId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="jobId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateWorker">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt; UpdateWorker (Azure.Communication.JobRouter.RouterWorker worker, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterWorker&gt; UpdateWorker(class Azure.Communication.JobRouter.RouterWorker worker, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.UpdateWorker(Azure.Communication.JobRouter.RouterWorker,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateWorker (worker As RouterWorker, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of RouterWorker)" />
      <MemberSignature Language="F#" Value="abstract member UpdateWorker : Azure.Communication.JobRouter.RouterWorker * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&#xA;override this.UpdateWorker : Azure.Communication.JobRouter.RouterWorker * Azure.RequestConditions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;" Usage="jobRouterClient.UpdateWorker (worker, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="worker" Type="Azure.Communication.JobRouter.RouterWorker" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="worker"> Worker to update. Uses merge-patch semantics: https://datatracker.ietf.org/doc/html/rfc7396. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> (Optional) The cancellation token to use. </param>
        <summary> Update a worker to process jobs. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateWorker">
      <MemberSignature Language="C#" Value="public virtual Azure.Response UpdateWorker (string workerId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response UpdateWorker(string workerId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.UpdateWorker(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateWorker (workerId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member UpdateWorker : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response&#xA;override this.UpdateWorker : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; Azure.Response" Usage="jobRouterClient.UpdateWorker (workerId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates a worker.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateWorkerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&gt; UpdateWorkerAsync (Azure.Communication.JobRouter.RouterWorker worker, Azure.RequestConditions requestConditions = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.Communication.JobRouter.RouterWorker&gt;&gt; UpdateWorkerAsync(class Azure.Communication.JobRouter.RouterWorker worker, class Azure.RequestConditions requestConditions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.UpdateWorkerAsync(Azure.Communication.JobRouter.RouterWorker,Azure.RequestConditions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateWorkerAsync (worker As RouterWorker, Optional requestConditions As RequestConditions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of RouterWorker))" />
      <MemberSignature Language="F#" Value="abstract member UpdateWorkerAsync : Azure.Communication.JobRouter.RouterWorker * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&gt;&#xA;override this.UpdateWorkerAsync : Azure.Communication.JobRouter.RouterWorker * Azure.RequestConditions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&gt;" Usage="jobRouterClient.UpdateWorkerAsync (worker, requestConditions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.Communication.JobRouter.RouterWorker&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="worker" Type="Azure.Communication.JobRouter.RouterWorker" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="worker"> Worker to update. Uses merge-patch semantics: https://datatracker.ietf.org/doc/html/rfc7396. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="cancellationToken"> (Optional) The cancellation token to use. </param>
        <summary> Update a worker to process jobs. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Azure.RequestFailedException">The server returned an error. See <see cref="P:System.Exception.Message" /> for details returned from the server.</exception>
      </Docs>
    </Member>
    <Member MemberName="UpdateWorkerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; UpdateWorkerAsync (string workerId, Azure.Core.RequestContent content, Azure.RequestConditions requestConditions = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; UpdateWorkerAsync(string workerId, class Azure.Core.RequestContent content, class Azure.RequestConditions requestConditions, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.Communication.JobRouter.JobRouterClient.UpdateWorkerAsync(System.String,Azure.Core.RequestContent,Azure.RequestConditions,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function UpdateWorkerAsync (workerId As String, content As RequestContent, Optional requestConditions As RequestConditions = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member UpdateWorkerAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.UpdateWorkerAsync : string * Azure.Core.RequestContent * Azure.RequestConditions * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="jobRouterClient.UpdateWorkerAsync (workerId, content, requestConditions, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.Communication.JobRouter</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workerId" Type="System.String" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="requestConditions" Type="Azure.RequestConditions" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="workerId"> Id of the worker. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="requestConditions"> The content to send as the request conditions of the request. </param>
        <param name="context"> The request context, which can override default behaviors of the client pipeline on a per-call basis. </param>
        <summary>
            [Protocol Method] Updates a worker.
            <list type="bullet"><item><description>
            This <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/ProtocolMethods.md">protocol method</see> allows explicit creation of the request and processing of the response for advanced scenarios.
            </description></item></list></summary>
        <returns> The response returned from the service. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="workerId" /> or <paramref name="content" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="workerId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:Azure.RequestFailedException"> Service returned a non-success status code. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
