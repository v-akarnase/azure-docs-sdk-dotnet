<Type Name="MockableHybridComputeSubscriptionResource" FullName="Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeSubscriptionResource">
  <TypeSignature Language="C#" Value="public class MockableHybridComputeSubscriptionResource : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableHybridComputeSubscriptionResource extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeSubscriptionResource" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableHybridComputeSubscriptionResource&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableHybridComputeSubscriptionResource = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to SubscriptionResource. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableHybridComputeSubscriptionResource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeSubscriptionResource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeSubscriptionResource" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionValue">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.HybridCompute.ExtensionValueResource&gt; GetExtensionValue (Azure.Core.AzureLocation location, string publisher, string extensionType, string version, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.ExtensionValueResource&gt; GetExtensionValue(valuetype Azure.Core.AzureLocation location, string publisher, string extensionType, string version, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeSubscriptionResource.GetExtensionValue(Azure.Core.AzureLocation,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtensionValue (location As AzureLocation, publisher As String, extensionType As String, version As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of ExtensionValueResource)" />
      <MemberSignature Language="F#" Value="abstract member GetExtensionValue : Azure.Core.AzureLocation * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.ExtensionValueResource&gt;&#xA;override this.GetExtensionValue : Azure.Core.AzureLocation * string * string * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.ExtensionValueResource&gt;" Usage="mockableHybridComputeSubscriptionResource.GetExtensionValue (location, publisher, extensionType, version, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.HybridCompute.ExtensionValueResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="publisher" Type="System.String" />
        <Parameter Name="extensionType" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> The location of the Extension being received. </param>
        <param name="publisher"> The publisher of the Extension being received. </param>
        <param name="extensionType"> The extensionType of the Extension being received. </param>
        <param name="version"> The version of the Extension being received. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an Extension Metadata based on location, publisher, extensionType and version
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridCompute/locations/{location}/publishers/{publisher}/extensionTypes/{extensionType}/versions/{version}</description></item><item><term>Operation Id</term><description>ExtensionMetadata_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="publisher" />, <paramref name="extensionType" /> or <paramref name="version" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="publisher" />, <paramref name="extensionType" /> or <paramref name="version" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionValueAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.ExtensionValueResource&gt;&gt; GetExtensionValueAsync (Azure.Core.AzureLocation location, string publisher, string extensionType, string version, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.ExtensionValueResource&gt;&gt; GetExtensionValueAsync(valuetype Azure.Core.AzureLocation location, string publisher, string extensionType, string version, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeSubscriptionResource.GetExtensionValueAsync(Azure.Core.AzureLocation,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtensionValueAsync (location As AzureLocation, publisher As String, extensionType As String, version As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of ExtensionValueResource))" />
      <MemberSignature Language="F#" Value="abstract member GetExtensionValueAsync : Azure.Core.AzureLocation * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.ExtensionValueResource&gt;&gt;&#xA;override this.GetExtensionValueAsync : Azure.Core.AzureLocation * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.ExtensionValueResource&gt;&gt;" Usage="mockableHybridComputeSubscriptionResource.GetExtensionValueAsync (location, publisher, extensionType, version, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.ExtensionValueResource&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="publisher" Type="System.String" />
        <Parameter Name="extensionType" Type="System.String" />
        <Parameter Name="version" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> The location of the Extension being received. </param>
        <param name="publisher"> The publisher of the Extension being received. </param>
        <param name="extensionType"> The extensionType of the Extension being received. </param>
        <param name="version"> The version of the Extension being received. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets an Extension Metadata based on location, publisher, extensionType and version
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridCompute/locations/{location}/publishers/{publisher}/extensionTypes/{extensionType}/versions/{version}</description></item><item><term>Operation Id</term><description>ExtensionMetadata_Get</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="publisher" />, <paramref name="extensionType" /> or <paramref name="version" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="publisher" />, <paramref name="extensionType" /> or <paramref name="version" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionValues">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridCompute.ExtensionValueCollection GetExtensionValues (Azure.Core.AzureLocation location, string publisher, string extensionType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridCompute.ExtensionValueCollection GetExtensionValues(valuetype Azure.Core.AzureLocation location, string publisher, string extensionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeSubscriptionResource.GetExtensionValues(Azure.Core.AzureLocation,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtensionValues (location As AzureLocation, publisher As String, extensionType As String) As ExtensionValueCollection" />
      <MemberSignature Language="F#" Value="abstract member GetExtensionValues : Azure.Core.AzureLocation * string * string -&gt; Azure.ResourceManager.HybridCompute.ExtensionValueCollection&#xA;override this.GetExtensionValues : Azure.Core.AzureLocation * string * string -&gt; Azure.ResourceManager.HybridCompute.ExtensionValueCollection" Usage="mockableHybridComputeSubscriptionResource.GetExtensionValues (location, publisher, extensionType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridCompute.ExtensionValueCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="publisher" Type="System.String" />
        <Parameter Name="extensionType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="location"> The location of the Extension being received. </param>
        <param name="publisher"> The publisher of the Extension being received. </param>
        <param name="extensionType"> The extensionType of the Extension being received. </param>
        <summary> Gets a collection of ExtensionValueResources in the SubscriptionResource. </summary>
        <returns> An object representing collection of ExtensionValueResources and their operations over a ExtensionValueResource. </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="publisher" /> or <paramref name="extensionType" /> is null. </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="publisher" /> or <paramref name="extensionType" /> is an empty string, and was expected to be non-empty. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputeMachines">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt; GetHybridComputeMachines (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt; GetHybridComputeMachines(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeSubscriptionResource.GetHybridComputeMachines(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputeMachines (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of HybridComputeMachineResource)" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputeMachines : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;&#xA;override this.GetHybridComputeMachines : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;" Usage="mockableHybridComputeSubscriptionResource.GetHybridComputeMachines cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists all the hybrid machines in the specified subscription. Use the nextLink property in the response to get the next page of hybrid machines.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridCompute/machines</description></item><item><term>Operation Id</term><description>Machines_ListBySubscription</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeMachineResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputeMachinesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt; GetHybridComputeMachinesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt; GetHybridComputeMachinesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeSubscriptionResource.GetHybridComputeMachinesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputeMachinesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of HybridComputeMachineResource)" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputeMachinesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;&#xA;override this.GetHybridComputeMachinesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;" Usage="mockableHybridComputeSubscriptionResource.GetHybridComputeMachinesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Lists all the hybrid machines in the specified subscription. Use the nextLink property in the response to get the next page of hybrid machines.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridCompute/machines</description></item><item><term>Operation Id</term><description>Machines_ListBySubscription</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeMachineResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputePrivateLinkScopes">
      <MemberSignature Language="C#" Value="public virtual Azure.Pageable&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt; GetHybridComputePrivateLinkScopes (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Pageable`1&lt;class Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt; GetHybridComputePrivateLinkScopes(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeSubscriptionResource.GetHybridComputePrivateLinkScopes(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputePrivateLinkScopes (Optional cancellationToken As CancellationToken = Nothing) As Pageable(Of HybridComputePrivateLinkScopeResource)" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputePrivateLinkScopes : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;&#xA;override this.GetHybridComputePrivateLinkScopes : System.Threading.CancellationToken -&gt; Azure.Pageable&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;" Usage="mockableHybridComputeSubscriptionResource.GetHybridComputePrivateLinkScopes cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Pageable&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of all Azure Arc PrivateLinkScopes within a subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridCompute/privateLinkScopes</description></item><item><term>Operation Id</term><description>PrivateLinkScopes_List</description></item></list></summary>
        <returns> A collection of <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputePrivateLinkScopesAsync">
      <MemberSignature Language="C#" Value="public virtual Azure.AsyncPageable&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt; GetHybridComputePrivateLinkScopesAsync (System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.AsyncPageable`1&lt;class Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt; GetHybridComputePrivateLinkScopesAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeSubscriptionResource.GetHybridComputePrivateLinkScopesAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputePrivateLinkScopesAsync (Optional cancellationToken As CancellationToken = Nothing) As AsyncPageable(Of HybridComputePrivateLinkScopeResource)" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputePrivateLinkScopesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;&#xA;override this.GetHybridComputePrivateLinkScopesAsync : System.Threading.CancellationToken -&gt; Azure.AsyncPageable&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;" Usage="mockableHybridComputeSubscriptionResource.GetHybridComputePrivateLinkScopesAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.AsyncPageable&lt;Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Gets a list of all Azure Arc PrivateLinkScopes within a subscription.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridCompute/privateLinkScopes</description></item><item><term>Operation Id</term><description>PrivateLinkScopes_List</description></item></list></summary>
        <returns> An async collection of <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource" /> that may take multiple service requests to iterate over. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValidationDetailsPrivateLinkScope">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.PrivateLinkScopeValidationDetails&gt; GetValidationDetailsPrivateLinkScope (Azure.Core.AzureLocation location, string privateLinkScopeId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.Models.PrivateLinkScopeValidationDetails&gt; GetValidationDetailsPrivateLinkScope(valuetype Azure.Core.AzureLocation location, string privateLinkScopeId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeSubscriptionResource.GetValidationDetailsPrivateLinkScope(Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValidationDetailsPrivateLinkScope (location As AzureLocation, privateLinkScopeId As String, Optional cancellationToken As CancellationToken = Nothing) As Response(Of PrivateLinkScopeValidationDetails)" />
      <MemberSignature Language="F#" Value="abstract member GetValidationDetailsPrivateLinkScope : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.PrivateLinkScopeValidationDetails&gt;&#xA;override this.GetValidationDetailsPrivateLinkScope : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.PrivateLinkScopeValidationDetails&gt;" Usage="mockableHybridComputeSubscriptionResource.GetValidationDetailsPrivateLinkScope (location, privateLinkScopeId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.PrivateLinkScopeValidationDetails&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="privateLinkScopeId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> The location of the target resource. </param>
        <param name="privateLinkScopeId"> The id (Guid) of the Azure Arc PrivateLinkScope resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a Azure Arc PrivateLinkScope's validation details.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridCompute/locations/{location}/privateLinkScopes/{privateLinkScopeId}</description></item><item><term>Operation Id</term><description>PrivateLinkScopes_GetValidationDetails</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="privateLinkScopeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="privateLinkScopeId" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="GetValidationDetailsPrivateLinkScopeAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.PrivateLinkScopeValidationDetails&gt;&gt; GetValidationDetailsPrivateLinkScopeAsync (Azure.Core.AzureLocation location, string privateLinkScopeId, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.ResourceManager.HybridCompute.Models.PrivateLinkScopeValidationDetails&gt;&gt; GetValidationDetailsPrivateLinkScopeAsync(valuetype Azure.Core.AzureLocation location, string privateLinkScopeId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeSubscriptionResource.GetValidationDetailsPrivateLinkScopeAsync(Azure.Core.AzureLocation,System.String,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetValidationDetailsPrivateLinkScopeAsync (location As AzureLocation, privateLinkScopeId As String, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of PrivateLinkScopeValidationDetails))" />
      <MemberSignature Language="F#" Value="abstract member GetValidationDetailsPrivateLinkScopeAsync : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.PrivateLinkScopeValidationDetails&gt;&gt;&#xA;override this.GetValidationDetailsPrivateLinkScopeAsync : Azure.Core.AzureLocation * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.PrivateLinkScopeValidationDetails&gt;&gt;" Usage="mockableHybridComputeSubscriptionResource.GetValidationDetailsPrivateLinkScopeAsync (location, privateLinkScopeId, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.ResourceManager.HybridCompute.Models.PrivateLinkScopeValidationDetails&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="Azure.Core.AzureLocation" />
        <Parameter Name="privateLinkScopeId" Type="System.String" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="location"> The location of the target resource. </param>
        <param name="privateLinkScopeId"> The id (Guid) of the Azure Arc PrivateLinkScope resource. </param>
        <param name="cancellationToken"> The cancellation token to use. </param>
        <summary>
            Returns a Azure Arc PrivateLinkScope's validation details.
            <list type="bullet"><item><term>Request Path</term><description>/subscriptions/{subscriptionId}/providers/Microsoft.HybridCompute/locations/{location}/privateLinkScopes/{privateLinkScopeId}</description></item><item><term>Operation Id</term><description>PrivateLinkScopes_GetValidationDetails</description></item></list></summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="privateLinkScopeId" /> is an empty string, and was expected to be non-empty. </exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="privateLinkScopeId" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
