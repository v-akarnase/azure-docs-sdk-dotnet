<Type Name="MockableHybridComputeArmClient" FullName="Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeArmClient">
  <TypeSignature Language="C#" Value="public class MockableHybridComputeArmClient : Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MockableHybridComputeArmClient extends Azure.ResourceManager.ArmResource" />
  <TypeSignature Language="DocId" Value="T:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeArmClient" />
  <TypeSignature Language="VB.NET" Value="Public Class MockableHybridComputeArmClient&#xA;Inherits ArmResource" />
  <TypeSignature Language="F#" Value="type MockableHybridComputeArmClient = class&#xA;    inherit ArmResource" />
  <AssemblyInfo>
    <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.ResourceManager.ArmResource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary> A class to add extension methods to ArmClient. </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MockableHybridComputeArmClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeArmClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary> Initializes a new instance of the <see cref="T:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeArmClient" /> class for mocking. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionValueResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridCompute.ExtensionValueResource GetExtensionValueResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridCompute.ExtensionValueResource GetExtensionValueResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeArmClient.GetExtensionValueResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetExtensionValueResource (id As ResourceIdentifier) As ExtensionValueResource" />
      <MemberSignature Language="F#" Value="abstract member GetExtensionValueResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridCompute.ExtensionValueResource&#xA;override this.GetExtensionValueResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridCompute.ExtensionValueResource" Usage="mockableHybridComputeArmClient.GetExtensionValueResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridCompute.ExtensionValueResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing an <see cref="T:Azure.ResourceManager.HybridCompute.ExtensionValueResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.HybridCompute.ExtensionValueResource.CreateResourceIdentifier(System.String,Azure.Core.AzureLocation,System.String,System.String,System.String)" /> to create an <see cref="T:Azure.ResourceManager.HybridCompute.ExtensionValueResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.HybridCompute.ExtensionValueResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputeMachineExtensionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridCompute.HybridComputeMachineExtensionResource GetHybridComputeMachineExtensionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridCompute.HybridComputeMachineExtensionResource GetHybridComputeMachineExtensionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeArmClient.GetHybridComputeMachineExtensionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputeMachineExtensionResource (id As ResourceIdentifier) As HybridComputeMachineExtensionResource" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputeMachineExtensionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridCompute.HybridComputeMachineExtensionResource&#xA;override this.GetHybridComputeMachineExtensionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridCompute.HybridComputeMachineExtensionResource" Usage="mockableHybridComputeArmClient.GetHybridComputeMachineExtensionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridCompute.HybridComputeMachineExtensionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeMachineExtensionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.HybridCompute.HybridComputeMachineExtensionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeMachineExtensionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeMachineExtensionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputeMachineResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridCompute.HybridComputeMachineResource GetHybridComputeMachineResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridCompute.HybridComputeMachineResource GetHybridComputeMachineResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeArmClient.GetHybridComputeMachineResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputeMachineResource (id As ResourceIdentifier) As HybridComputeMachineResource" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputeMachineResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridCompute.HybridComputeMachineResource&#xA;override this.GetHybridComputeMachineResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridCompute.HybridComputeMachineResource" Usage="mockableHybridComputeArmClient.GetHybridComputeMachineResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridCompute.HybridComputeMachineResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeMachineResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.HybridCompute.HybridComputeMachineResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeMachineResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputeMachineResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputePrivateEndpointConnectionResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridCompute.HybridComputePrivateEndpointConnectionResource GetHybridComputePrivateEndpointConnectionResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridCompute.HybridComputePrivateEndpointConnectionResource GetHybridComputePrivateEndpointConnectionResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeArmClient.GetHybridComputePrivateEndpointConnectionResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputePrivateEndpointConnectionResource (id As ResourceIdentifier) As HybridComputePrivateEndpointConnectionResource" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputePrivateEndpointConnectionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridCompute.HybridComputePrivateEndpointConnectionResource&#xA;override this.GetHybridComputePrivateEndpointConnectionResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridCompute.HybridComputePrivateEndpointConnectionResource" Usage="mockableHybridComputeArmClient.GetHybridComputePrivateEndpointConnectionResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridCompute.HybridComputePrivateEndpointConnectionResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputePrivateEndpointConnectionResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.HybridCompute.HybridComputePrivateEndpointConnectionResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputePrivateEndpointConnectionResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputePrivateEndpointConnectionResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputePrivateLinkResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkResource GetHybridComputePrivateLinkResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkResource GetHybridComputePrivateLinkResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeArmClient.GetHybridComputePrivateLinkResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputePrivateLinkResource (id As ResourceIdentifier) As HybridComputePrivateLinkResource" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputePrivateLinkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkResource&#xA;override this.GetHybridComputePrivateLinkResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkResource" Usage="mockableHybridComputeArmClient.GetHybridComputePrivateLinkResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkResource.CreateResourceIdentifier(System.String,System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHybridComputePrivateLinkScopeResource">
      <MemberSignature Language="C#" Value="public virtual Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource GetHybridComputePrivateLinkScopeResource (Azure.Core.ResourceIdentifier id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource GetHybridComputePrivateLinkScopeResource(class Azure.Core.ResourceIdentifier id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.ResourceManager.HybridCompute.Mocking.MockableHybridComputeArmClient.GetHybridComputePrivateLinkScopeResource(Azure.Core.ResourceIdentifier)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetHybridComputePrivateLinkScopeResource (id As ResourceIdentifier) As HybridComputePrivateLinkScopeResource" />
      <MemberSignature Language="F#" Value="abstract member GetHybridComputePrivateLinkScopeResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource&#xA;override this.GetHybridComputePrivateLinkScopeResource : Azure.Core.ResourceIdentifier -&gt; Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource" Usage="mockableHybridComputeArmClient.GetHybridComputePrivateLinkScopeResource id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.ResourceManager.HybridCompute</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="Azure.Core.ResourceIdentifier" />
      </Parameters>
      <Docs>
        <param name="id"> The resource ID of the resource to get. </param>
        <summary>
            Gets an object representing a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource" /> along with the instance operations that can be performed on it but with no data.
            You can use <see cref="M:Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource.CreateResourceIdentifier(System.String,System.String,System.String)" /> to create a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource" /><see cref="T:Azure.Core.ResourceIdentifier" /> from its components.
            </summary>
        <returns> Returns a <see cref="T:Azure.ResourceManager.HybridCompute.HybridComputePrivateLinkScopeResource" /> object. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
